/*
 *     Generated by class-dump 3.1.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2006 by Steve Nygard.
 */

struct ATSUI_render {
    struct TextLayout _field1;
    struct list<ATSUI_render::new_node, std::allocator<ATSUI_render::new_node>> _field2;
};

struct ATSUTab;

struct OakClickInfo {
    int type;
    unsigned int tabIndex;
};

struct OpaqueMenuRef;

struct TextLayout {
    unsigned int atsuFontID;
    int fontSize;
    int M_ascend;
    int M_descend;
    int M_charWidth;
    unsigned int M_lineHeight;
    struct vector<ATSUTab, std::allocator<ATSUTab>> tabStops;
    unsigned int tabSize;
    _Bool antiAlias;
};

struct _Alloc_hider {
    char *_M_p;
};

struct _Deque_impl {
    struct callback_record **_M_map;
    unsigned int _M_map_size;
    struct _Deque_iterator<callback_record, callback_record&, callback_record*> _M_start;
    struct _Deque_iterator<callback_record, callback_record&, callback_record*> _M_finish;
};

struct _Deque_iterator<callback_record, callback_record&, callback_record*> {
    struct callback_record *_M_cur;
    struct callback_record *_M_first;
    struct callback_record *_M_last;
    struct callback_record **_M_node;
};

struct _Deque_iterator<text::undo_manager::node, text::undo_manager::node&, text::undo_manager::node*> {
    struct node *_field1;
    struct node *_field2;
    struct node *_field3;
    struct node **_field4;
};

struct _List_impl {
    struct _List_node_base _M_node;
};

struct _List_iterator<text::storage::observer*> {
    struct _List_node_base *_field1;
};

struct _List_node_base {
    struct _List_node_base *_M_next;
    struct _List_node_base *_M_prev;
};

struct _NSPoint {
    float x;
    float y;
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct _Rb_tree<bit_stack::storage, std::pair<const bit_stack::storage, objc_ptr<objc_object*>>, std::_Select1st<std::pair<const bit_stack::storage, objc_ptr<objc_object*>>>, std::less<bit_stack::storage>, std::allocator<std::pair<const bit_stack::storage, objc_ptr<objc_object*>>>> {
    struct _Rb_tree_impl<std::less<bit_stack::storage>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, std::pair<int, int>>, std::_Select1st<std::pair<const int, std::pair<int, int>>>, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int>>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<size_t, std::pair<const size_t, size_t>, std::_Select1st<std::pair<const size_t, size_t>>, std::less<size_t>, std::allocator<std::pair<const size_t, size_t>>> {
    struct _Rb_tree_impl<std::less<size_t>, false> _field1;
};

struct _Rb_tree<size_t, std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>, std::_Select1st<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>>, std::less<size_t>, std::allocator<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>>> {
    struct _Rb_tree_impl<std::less<size_t>, false> _field1;
};

struct _Rb_tree<size_t, std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>, std::_Select1st<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>>, std::less<size_t>, std::allocator<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>>> {
    struct _Rb_tree_impl<std::less<size_t>, false> _field1;
};

struct _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>>, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> _M_impl;
};

struct _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>>, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> _M_impl;
};

struct _Rb_tree<text::undo_key, std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>, std::_Select1st<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>>> {
    struct _Rb_tree_impl<std::less<text::undo_key>, false> _field1;
};

struct _Rb_tree<text::undo_key, std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>, std::_Select1st<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>>> {
    struct _Rb_tree_impl<std::less<text::undo_key>, false> _field1;
};

struct _Rb_tree<text::undo_key, std::pair<const text::undo_key, text::selection>, std::_Select1st<std::pair<const text::undo_key, text::selection>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, text::selection>>> {
    struct _Rb_tree_impl<std::less<text::undo_key>, false> _field1;
};

struct _Rb_tree<text::view::filter_index, std::pair<const text::view::filter_index, text::filter*>, std::_Select1st<std::pair<const text::view::filter_index, text::filter*>>, std::less<text::view::filter_index>, std::allocator<std::pair<const text::view::filter_index, text::filter*>>> {
    struct _Rb_tree_impl<std::less<text::view::filter_index>, false> _field1;
};

struct _Rb_tree<text::view::folding_filter::folding_t, text::view::folding_filter::folding_t, std::_Identity<text::view::folding_filter::folding_t>, std::less<text::view::folding_filter::folding_t>, std::allocator<text::view::folding_filter::folding_t>> {
    struct _Rb_tree_impl<std::less<text::view::folding_filter::folding_t>, false> _field1;
};

struct _Rb_tree<text::view::folding_filter::marker_t, text::view::folding_filter::marker_t, std::_Identity<text::view::folding_filter::marker_t>, std::less<text::view::folding_filter::marker_t>, std::allocator<text::view::folding_filter::marker_t>> {
    struct _Rb_tree_impl<std::less<text::view::folding_filter::marker_t>, false> _field1;
};

struct _Rb_tree<unichar, unichar, std::_Identity<unichar>, std::less<unichar>, std::allocator<unichar>> {
    struct _Rb_tree_impl<std::less<unichar>, false> _M_impl;
};

struct _Rb_tree_impl<std::less<bit_stack::storage>, false> {
    struct less<bit_stack::storage> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<int>, false> {
    struct less<int> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<size_t>, false> {
    struct less<size_t> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> {
    struct less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<text::undo_key>, false> {
    struct less<text::undo_key> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<text::view::filter_index>, false> {
    struct less<text::view::filter_index> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<text::view::folding_filter::folding_t>, false> {
    struct less<text::view::folding_filter::folding_t> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<text::view::folding_filter::marker_t>, false> {
    struct less<text::view::folding_filter::marker_t> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<unichar>, false> {
    struct less<unichar> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_node_base {
    int _M_color;
    struct _Rb_tree_node_base *_M_parent;
    struct _Rb_tree_node_base *_M_left;
    struct _Rb_tree_node_base *_M_right;
};

struct _Vector_impl {
    struct shared_buffer<text::char_t> *_M_start;
    struct shared_buffer<text::char_t> *_M_finish;
    struct shared_buffer<text::char_t> *_M_end_of_storage;
};

struct __CFArray;

struct _opaque_pthread_cond_t {
    long _field1;
    unsigned char _field2[24];
};

struct _opaque_pthread_mutex_t {
    long _field1;
    unsigned char _field2[40];
};

struct _opaque_pthread_t;

struct action_map {
    struct map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>>> _field1;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct _Alloc_hider _field1;
};

struct basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>;

struct bookmark_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct map<size_t, size_t, std::less<size_t>, std::allocator<std::pair<const size_t, size_t>>> _field4;
};

struct callback_record;

struct completion_helper {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct view_iterator _field4;
    struct view_iterator _field5;
    struct vector<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> _field6;
};

struct deque<callback_record, std::allocator<callback_record>> {
    struct _Deque_impl _M_impl;
};

struct deque<text::undo_manager::node, std::allocator<text::undo_manager::node>> {
    struct _Deque_impl _field1;
};

struct detail {
    struct vector<shared_buffer<text::char_t>, std::allocator<shared_buffer<text::char_t>>> _field1;
    struct list<text::storage::observer*, std::allocator<text::storage::observer*>> _field2;
    struct _opaque_pthread_mutex_t _field3;
};

struct erase_t;

struct filter;

struct folding_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct ptrn_t *_field4;
    struct ptrn_t *_field5;
    struct set<text::view::folding_filter::marker_t, std::less<text::view::folding_filter::marker_t>, std::allocator<text::view::folding_filter::marker_t>> _field6;
    struct set<text::view::folding_filter::folding_t, std::less<text::view::folding_filter::folding_t>, std::allocator<text::view::folding_filter::folding_t>> _field7;
    _Bool _field8;
    unsigned int _field9;
};

struct insert_t;

struct iterator {
    unsigned int _field1;
    unsigned int _field2;
    struct storage *_field3;
};

struct iterator_observer {
    void **_field1;
    struct list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>> _field2;
    struct list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>> _field3;
    struct list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>> _field4;
    struct list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>> _field5;
    struct map<text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>>> _field6;
    struct map<text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>>> _field7;
    struct vector<text::iterator_observer::pending_erase, std::allocator<text::iterator_observer::pending_erase>> _field8;
    struct vector<text::iterator_observer::pending_insert, std::allocator<text::iterator_observer::pending_insert>> _field9;
    struct vector<unichar, std::allocator<unichar>> _field10;
    unsigned int _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
};

struct kill_buffer_t {
    struct vector<unichar, std::allocator<unichar>> _field1;
    unsigned int _field2;
    struct iterator _field3;
    _Bool _field4;
};

struct less<bit_stack::storage>;

struct less<int>;

struct less<size_t>;

struct less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>;

struct less<text::undo_key>;

struct less<text::view::filter_index>;

struct less<text::view::folding_filter::folding_t>;

struct less<text::view::folding_filter::marker_t>;

struct less<unichar>;

struct line_range;

struct list<ATSUI_render::new_node, std::allocator<ATSUI_render::new_node>> {
    struct _List_impl _M_impl;
};

struct list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>> {
    struct _List_impl _field1;
};

struct list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>> {
    struct _List_impl _field1;
};

struct list<text::storage::observer*, std::allocator<text::storage::observer*>> {
    struct _List_impl _field1;
};

struct map<bit_stack::storage, objc_ptr<objc_object*>, std::less<bit_stack::storage>, std::allocator<std::pair<const bit_stack::storage, objc_ptr<objc_object*>>>> {
    struct _Rb_tree<bit_stack::storage, std::pair<const bit_stack::storage, objc_ptr<objc_object*>>, std::_Select1st<std::pair<const bit_stack::storage, objc_ptr<objc_object*>>>, std::less<bit_stack::storage>, std::allocator<std::pair<const bit_stack::storage, objc_ptr<objc_object*>>>> _field1;
};

struct map<int, std::pair<int, int>, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int>>>> {
    struct _Rb_tree<int, std::pair<const int, std::pair<int, int>>, std::_Select1st<std::pair<const int, std::pair<int, int>>>, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int>>>> _field1;
};

struct map<size_t, size_t, std::less<size_t>, std::allocator<std::pair<const size_t, size_t>>> {
    struct _Rb_tree<size_t, std::pair<const size_t, size_t>, std::_Select1st<std::pair<const size_t, size_t>>, std::less<size_t>, std::allocator<std::pair<const size_t, size_t>>> _field1;
};

struct map<size_t, std::_List_iterator<text::iterator_observer::subset>, std::less<size_t>, std::allocator<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>>> {
    struct _Rb_tree<size_t, std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>, std::_Select1st<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>>, std::less<size_t>, std::allocator<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>>> _field1;
};

struct map<size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>, std::less<size_t>, std::allocator<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>>> {
    struct _Rb_tree<size_t, std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>, std::_Select1st<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>>, std::less<size_t>, std::allocator<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>>> _field1;
};

struct map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>>> {
    struct _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>>, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, action_map::action*>>> _M_t;
};

struct map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>>> {
    struct _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>>, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>>> _M_t;
};

struct map<text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>>> {
    struct _Rb_tree<text::undo_key, std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>, std::_Select1st<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>>>>>> _field1;
};

struct map<text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>>> {
    struct _Rb_tree<text::undo_key, std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>, std::_Select1st<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset>>>>> _field1;
};

struct map<text::undo_key, text::selection, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, text::selection>>> {
    struct _Rb_tree<text::undo_key, std::pair<const text::undo_key, text::selection>, std::_Select1st<std::pair<const text::undo_key, text::selection>>, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, text::selection>>> _field1;
};

struct map<text::view::filter_index, text::filter*, std::less<text::view::filter_index>, std::allocator<std::pair<const text::view::filter_index, text::filter*>>> {
    struct _Rb_tree<text::view::filter_index, std::pair<const text::view::filter_index, text::filter*>, std::_Select1st<std::pair<const text::view::filter_index, text::filter*>>, std::less<text::view::filter_index>, std::allocator<std::pair<const text::view::filter_index, text::filter*>>> _field1;
};

struct map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage>>>;

struct node;

struct node_t;

struct observer {
    void **_field1;
};

struct pending_erase;

struct pending_insert;

struct pos {
    unsigned int _field1;
    unsigned int _field2;
};

struct ptrn_t;

struct selection {
    struct view_iterator _field1;
    struct view_iterator _field2;
    struct view_iterator _field3;
    _Bool _field4;
    struct vector<unichar, std::allocator<unichar>> _field5;
};

struct set<text::view::folding_filter::folding_t, std::less<text::view::folding_filter::folding_t>, std::allocator<text::view::folding_filter::folding_t>> {
    struct _Rb_tree<text::view::folding_filter::folding_t, text::view::folding_filter::folding_t, std::_Identity<text::view::folding_filter::folding_t>, std::less<text::view::folding_filter::folding_t>, std::allocator<text::view::folding_filter::folding_t>> _field1;
};

struct set<text::view::folding_filter::marker_t, std::less<text::view::folding_filter::marker_t>, std::allocator<text::view::folding_filter::marker_t>> {
    struct _Rb_tree<text::view::folding_filter::marker_t, text::view::folding_filter::marker_t, std::_Identity<text::view::folding_filter::marker_t>, std::less<text::view::folding_filter::marker_t>, std::allocator<text::view::folding_filter::marker_t>> _field1;
};

struct set<unichar, std::less<unichar>, std::allocator<unichar>> {
    struct _Rb_tree<unichar, unichar, std::_Identity<unichar>, std::less<unichar>, std::allocator<unichar>> _field1;
};

struct shared_buffer<text::char_t>;

struct snippet_observer_t {
    void **_field1;
    struct iterator _field2;
    struct snippet_t *_field3;
    struct vector<text::snippet_observer_t::insert_t, std::allocator<text::snippet_observer_t::insert_t>> _field4;
    struct vector<text::snippet_observer_t::erase_t, std::allocator<text::snippet_observer_t::erase_t>> _field5;
};

struct snippet_t;

struct soft_wrap_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct pos _field4;
    struct pos _field5;
    struct vector<text::view::soft_wrap_filter::line_range, std::allocator<text::view::soft_wrap_filter::line_range>> _field6;
};

struct spellcheck_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct vector<text::view::spellcheck_filter::node_t, std::allocator<text::view::spellcheck_filter::node_t>> _field4;
};

struct stack<callback_record, std::deque<callback_record, std::allocator<callback_record>>> {
    struct deque<callback_record, std::allocator<callback_record>> _field1;
};

struct stack<text::undo_manager::node, std::deque<text::undo_manager::node, std::allocator<text::undo_manager::node>>> {
    struct deque<text::undo_manager::node, std::allocator<text::undo_manager::node>> _field1;
};

struct storage {
    struct detail _field1;
    struct kill_buffer_t _field2;
    struct vector<text::storage::undo_record, std::allocator<text::storage::undo_record>> _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    struct undo_manager _field8;
};

struct storage_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct _List_iterator<text::storage::observer*> _field4;
};

struct title_action_map {
    struct map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, title_action_map::action*>>> _field1;
};

struct tokenize_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct __CFArray *_field4;
    unsigned int _field5;
    struct vector<std::map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage>>>, std::allocator<std::map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage>>>>> _field6;
    struct map<size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>, std::less<size_t>, std::allocator<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper>>>>>> _field7;
    struct _opaque_pthread_t *_field8;
    struct _opaque_pthread_cond_t _field9;
    struct _opaque_pthread_cond_t _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    _Bool _field16;
    int _field17;
    int _field18;
    void *_field19;
};

struct undo_manager {
    struct stack<text::undo_manager::node, std::deque<text::undo_manager::node, std::allocator<text::undo_manager::node>>> _field1;
};

struct undo_record;

struct vector<ATSUTab, std::allocator<ATSUTab>> {
    struct _Vector_impl _M_impl;
};

struct vector<NSTrackingRectTag, std::allocator<NSTrackingRectTag>> {
    struct _Vector_impl _field1;
};

struct vector<shared_buffer<text::char_t>, std::allocator<shared_buffer<text::char_t>>> {
    struct _Vector_impl _field1;
};

struct vector<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> {
    struct _Vector_impl _field1;
};

struct vector<std::map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage>>>, std::allocator<std::map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage>>>>> {
    struct _Vector_impl _field1;
};

struct vector<std::vector<text::char_t, std::allocator<text::char_t>>, std::allocator<std::vector<text::char_t, std::allocator<text::char_t>>>> {
    struct _Vector_impl _field1;
};

struct vector<text::char_t, std::allocator<text::char_t>>;

struct vector<text::iterator_observer::pending_erase, std::allocator<text::iterator_observer::pending_erase>> {
    struct _Vector_impl _field1;
};

struct vector<text::iterator_observer::pending_insert, std::allocator<text::iterator_observer::pending_insert>> {
    struct _Vector_impl _field1;
};

struct vector<text::snippet_observer_t::erase_t, std::allocator<text::snippet_observer_t::erase_t>> {
    struct _Vector_impl _field1;
};

struct vector<text::snippet_observer_t::insert_t, std::allocator<text::snippet_observer_t::insert_t>> {
    struct _Vector_impl _field1;
};

struct vector<text::storage::undo_record, std::allocator<text::storage::undo_record>> {
    struct _Vector_impl _field1;
};

struct vector<text::view*, std::allocator<text::view*>> {
    struct _Vector_impl _field1;
};

struct vector<text::view::soft_wrap_filter::line_range, std::allocator<text::view::soft_wrap_filter::line_range>> {
    struct _Vector_impl _field1;
};

struct vector<text::view::spellcheck_filter::node_t, std::allocator<text::view::spellcheck_filter::node_t>> {
    struct _Vector_impl _field1;
};

struct vector<unichar, std::allocator<unichar>> {
    struct _Vector_impl _field1;
};

struct view {
    struct iterator_observer _field1;
    struct iterator_observer _field2;
    struct snippet_observer_t _field3;
    struct selection _field4;
    struct selection _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    struct map<size_t, std::_List_iterator<text::iterator_observer::subset>, std::less<size_t>, std::allocator<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset>>>> _field20;
    int _field21;
    _Bool _field22;
    _Bool _field23;
    struct storage_filter _field24;
    struct tokenize_filter _field25;
    struct bookmark_filter _field26;
    struct spellcheck_filter _field27;
    struct folding_filter _field28;
    struct soft_wrap_filter _field29;
    struct view_filter _field30;
    struct map<text::view::filter_index, text::filter*, std::less<text::view::filter_index>, std::allocator<std::pair<const text::view::filter_index, text::filter*>>> _field31;
    struct completion_helper _field32;
};

struct view_filter {
    void **_field1;
    struct filter *_field2;
    struct filter *_field3;
    struct map<text::undo_key, text::selection, std::less<text::undo_key>, std::allocator<std::pair<const text::undo_key, text::selection>>> _field4;
};

struct view_iterator {
    struct view *_field1;
    struct iterator _field2;
    unsigned int _field3;
    unsigned int _field4;
};

/*
 * File: /Applications/TextMate.app/Contents/MacOS/TextMate
 * Arch: Intel 80x86 (i386)
 */

@protocol NSTextInput
- (void)insertText:(id)fp8;
- (void)doCommandBySelector:(SEL)fp8;
- (void)setMarkedText:(id)fp8 selectedRange:(struct _NSRange)fp12;
- (void)unmarkText;
- (BOOL)hasMarkedText;
- (long)conversationIdentifier;
- (id)attributedSubstringFromRange:(struct _NSRange)fp8;
- (struct _NSRange)markedRange;
- (struct _NSRange)selectedRange;
- (struct _NSRect)firstRectForCharacterRange:(struct _NSRange)fp8;
- (unsigned int)characterIndexForPoint:(struct _NSPoint)fp8;
- (id)validAttributesForMarkedText;
@end

@protocol OakKeyObserver
- (BOOL)shouldSwallowEvent:(id)fp8;
@end

@protocol QSStringRanker
- (id)initWithString:(id)fp8;
- (double)scoreForAbbreviation:(id)fp8;
- (id)maskForAbbreviation:(id)fp8;
@end

@protocol TextMateServerProtocol
- (int)textMateServerProtocolVersion;
- (BOOL)openFiles:(id)fp8 options:(id)fp12 delegate:(id)fp16 didCloseSelector:(SEL)fp20;
@end

@interface AppDelegate : NSObject
{
    OakEncodingView *savePanelAccessoryView;
    NSPanel *fillWithStringPanel;
    NSPanel *goToLinePanel;
    NSTextField *goToLineTextField;
    NSView *openPanelAccessoryView;
    NSArray *allWindowDelegates;
    BOOL shouldOpenSavedDocuments;
    unsigned int numberOfUntitledDocuments;
    unsigned int nextUntitledDocumentCount;
    unsigned int numberOfUntitledProjects;
    unsigned int nextUntitledProjectCount;
    NSString *currentDirectory;
}

+ (void)initialize;
- (void)applicationWillFinishLaunching:(id)fp8;
- (void)applicationDidFinishLaunching:(id)fp8;
- (void)showExtendedTerminalUsageHelp:(id)fp8;
- (void)readPrefs:(id)fp8;
- (int)orderFrontRegistrationPanel:(id)fp8;
- (void)orderFrontPreferences:(id)fp8;
- (void)orderFrontPasteboardPanel:(id)fp8;
- (void)newProject:(id)fp8;
- (void)newDocument:(id)fp8;
- (void)workaroundHideBug:(id)fp8;
- (id)collectAuxiliaryInfo;
- (id)bundlePaths;
- (void)openFiles:(id)fp8;
- (void)openDocument:(id)fp8;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;
- (BOOL)applicationOpenUntitledFile:(id)fp8;
- (BOOL)applicationShouldHandleReopen:(id)fp8 hasVisibleWindows:(BOOL)fp12;
- (BOOL)applicationShouldOpenUntitledFile:(id)fp8;
- (void)application:(id)fp8 openFiles:(id)fp12;
- (BOOL)application:(id)fp8 openFile:(id)fp12;
- (void)sendFeedback:(id)fp8;
- (void)orderFrontFindPanel:(id)fp8;
- (void)orderFrontFindInProjectPanel:(id)fp8;
- (void)executeCommand:(id)fp8;
- (void)rememberDocumentFiles:(id)fp8;
- (void)didCloseWindow:(id)fp8 callStack:(id)fp12;
- (int)applicationShouldTerminate:(id)fp8;
- (BOOL)application:(id)fp8 delegateHandlesKey:(id)fp12;
- (id)orderedDocuments;
- (unsigned long)registerUntitledDocument;
- (void)unregisterUntitledDocument:(unsigned long)fp8;
- (unsigned long)registerUntitledProject;
- (void)unregisterUntitledProject:(unsigned long)fp8;
- (void)orderFrontGoToLinePanel:(id)fp8;
- (void)goToLineAction:(id)fp8;
- (void)orderFrontReleaseNotes:(id)fp8;
- (void)goToSupportPage:(id)fp8;
- (void)selectFileAtTabIndex:(id)fp8;
- (void)menuNeedsUpdate:(id)fp8;
- (id)supportPath;
- (id)environmentVariables;

@end

@interface OakApplication : NSApplication
{
    NSMutableArray *keyObservers;
}

- (id)init;
- (void)addKeyObserver:(id)fp8;
- (void)removeKeyObserver:(id)fp8;
- (void)sendEvent:(id)fp8;

@end

@interface OakEncodingView : NSView
{
    NSPopUpButton *encodingPopupButton;
    NSPopUpButton *lineEndingPopupButton;
}

- (int)fileEncodingChoice;
- (void)setFileEncodingChoice:(int)fp8;
- (int)lineEndingChoice;
- (void)setLineEndingChoice:(int)fp8;

@end

@interface OakHackedDocumentController : NSDocumentController
{
}

- (unsigned int)maximumRecentDocumentCount;

@end

@interface TextMateServer : NSObject <TextMateServerProtocol>
{
}

- (int)textMateServerProtocolVersion;
- (BOOL)openFiles:(id)fp8 options:(id)fp12 delegate:(id)fp16 didCloseSelector:(SEL)fp20;

@end

@interface OakDocumentDidCloseObserver : NSObject
{
    id delegate;
    SEL selector;
    id fileObject;
}

- (void)documentDidClose:(id)fp8;
- (void)setSelector:(SEL)fp8;
- (void)dealloc;

@end

@interface OakArrayToStringTransformer : NSValueTransformer
{
}

+ (Class)transformedValueClass;
+ (BOOL)allowsReverseTransformation;
+ (void)load;
- (id)transformedValue:(id)fp8;
- (id)reverseTransformedValue:(id)fp8;

@end

@interface OakStringListTransformer : NSValueTransformer
{
    NSArray *stringList;
}

+ (Class)transformedValueClass;
+ (BOOL)allowsReverseTransformation;
+ (void)setStringListTransformer:(id)fp8 forName:(id)fp12;
+ (void)createTransformerWithName:(id)fp8 andObjects:(id)fp12;
- (void)dealloc;
- (id)transformedValue:(id)fp8;
- (id)reverseTransformedValue:(id)fp8;

@end

@interface OakVerifyFileTransformer : NSValueTransformer
{
}

+ (Class)transformedValueClass;
- (id)transformedValue:(id)fp8;

@end

@interface OakPreOrderArrayEnumerator : NSEnumerator
{
    NSMutableArray *stack;
}

- (id)initWithArray:(id)fp8;
- (void)dealloc;
- (id)nextObject;

@end

@interface NSTextView (OakFindNextPrevious)
- (void)copySelectionToFindPboard:(id)fp8;
- (void)findNext:(id)fp8;
- (void)findPrevious:(id)fp8;
- (id)findWithOptions:(id)fp8;
@end

@interface NSDictionary (PrettyPrint)
- (BOOL)plistFitsSingleLine;
- (id)stringWithIndent:(unsigned int)fp8 isKey:(BOOL)fp12 isSingleLine:(BOOL)fp16;
@end

@interface NSArray (PrettyPrint)
- (BOOL)plistFitsSingleLine;
- (id)stringWithIndent:(unsigned int)fp8 isKey:(BOOL)fp12 isSingleLine:(BOOL)fp16;
@end

@interface NSString (PrettyPrint)
- (id)stringWithIndent:(unsigned int)fp8 isKey:(BOOL)fp12 isSingleLine:(BOOL)fp16;
@end

@interface NSObject (PrettyPrint)
- (BOOL)plistFitsSingleLine;
- (id)stringWithIndent:(unsigned int)fp8 isKey:(BOOL)fp12 isSingleLine:(BOOL)fp16;
@end

@interface NSString (OakString)
+ (id)stringWithData:(id)fp8;
- (id)labelForCopyWithExistingLabels:(id)fp8;
@end

@interface NSString (OakRegEx)
- (BOOL)isEqualToRegEx:(id)fp8;
- (id)componentsInRegEx:(id)fp8;
@end

@interface NSAlert (OakAlert)
- (void)addButtons:(id)fp8;
@end

@interface NSWindow (OakView)
- (void)toggleVisibility;
@end

@interface NSView (OakView)
- (id)imageForRect:(struct _NSRect)fp8 withClip:(id)fp24;
@end

@interface NSPasteboard (OakPasteboard)
- (id)stringRepresentation;
@end

@interface NSMutableArray (OakMutableArray)
- (void)insertObjectsFromArray:(id)fp8 atIndex:(int)fp12;
- (void)removeObjectsWithKey:(id)fp8;
- (id)arrayContainingItem:(id)fp8;
- (id)ancestorsForItem:(id)fp8;
@end

@interface NSArray (OakArray)
- (id)preOrderObjectEnumerator;
- (id)firstObject;
- (void)tagItemsWithString:(id)fp8;
- (void)untagItemsWithString:(id)fp8;
@end

@interface NSString (OakPath)
+ (id)stringWithUTF8String:(const char *)fp8 length:(unsigned int)fp12;
- (id)pathExtensions;
- (id)stringByDeletingPathExtensions;
- (id)associatedApplication;
- (id)stringByRemovingAbsolutePath:(id)fp8;
- (id)modificationDate;
- (BOOL)existsAsPath;
- (BOOL)isDirectory;
- (BOOL)canCreateAsDirectory;
- (BOOL)moveFileToTrash;
- (BOOL)moveFileTo:(id)fp8;
@end

@interface NSString (UUID)
+ (id)stringWithUUID;
@end

@interface NSOutlineView (OakOutlineView)
- (id)selectedItem;
- (id)selectedItems;
- (void)selectItem:(id)fp8;
- (void)selectItems:(id)fp8;
- (id)expandedItems;
- (void)expandItems:(id)fp8;
@end

@interface NSBezierPath (OakBezierPath)
+ (id)bezierPathWithRoundRectInRect:(struct _NSRect)fp8 radius:(float)fp24;
@end

@interface NSSavePanel (DeselectExtension)
- (void)deselectExtension;
@end

@interface NSObject (DeepCopy)
- (id)deepCopy;
@end

@interface NSWindow (RevealInFinder)
- (void)revealFileInFinder:(id)fp8;
@end

@interface NSScreen (RestrainFrames)
+ (id)screenWithFrame:(struct _NSRect)fp8;
- (struct _NSRect)restrainFrameToVisibleScreen:(struct _NSRect)fp8;
@end

@interface NSDictionary (MutableDeepCopy)
- (id)mutableDeepCopy;
@end

@interface NSArray (MutableDeepCopy)
- (id)mutableDeepCopy;
@end

@interface NSObject (MutableDeepCopy)
- (id)mutableDeepCopy;
@end

@interface DuffStringRanker : NSObject <QSStringRanker>
{
    unsigned short *string;
    unsigned int *originalIndex;
    unsigned int length;
}

- (id)initWithString:(id)fp8;
- (void)dealloc;
- (double)scoreForAbbreviation:(id)fp8;
- (id)maskForAbbreviation:(id)fp8;

@end

@interface OakBundleEditor : NSObject
{
    NSPanel *bundleEditorPanel;
    NSSplitView *mainSplitView;
    OakBundleOutlineView *outlineView;
    NSTextField *boxTitle;
    NSBox *editorBox;
    OakKeyEquivalent *keyEquivalentField;
    NSMenu *bundleFilterMenu;
    NSPanel *bundleListEditorSheet;
    NSTableView *bundleListEditorTableView;
    NSView *snippetEditor;
    NSView *commandEditor;
    NSView *dragCommandEditor;
    NSView *macroEditor;
    NSView *languageEditor;
    NSTextView *languageTextView;
    NSView *preferenceEditor;
    NSTextView *preferenceTextView;
    NSView *templateEditor;
    NSView *templateFileEditor;
    NSTextView *templateFileTextView;
    OakBundleSplitView *splitView;
    NSView *noSelection;
    NSImageView *imageView;
    NSOutlineView *menuStructureOutlineview;
    NSTableView *excludedMenuItemsTableView;
    NSView *bundlePropertiesEditor;
    OakBundlePropertiesEditor *bundlePropertiesEditorDelegate;
    NSArray *cachedBundles;
    NSMutableDictionary *cachedBundleItems;
    NSUndoManager *undoManager;
    NSString *bundleFilter;
    id selection;
    BOOL canAddBundleItem;
    BOOL canDuplicateBundleItem;
    BOOL canRemoveBundleItem;
    BOOL updateLanguages;
    BOOL updatePreferences;
    NSDate *animationStart;
    NSTimer *animationTimer;
    BOOL pendingShowOutputPatternOptions;
    BOOL showOutputPatternOptions;
    NSMutableArray *editors;
    NSMutableArray *allBundles;
}

+ (id)sharedInstance;
+ (void)initialize;
- (id)windowWillReturnUndoManager:(id)fp8;
- (id)init;
- (void)dealloc;
- (BOOL)validateMenuItem:(id)fp8;
- (void)undo:(id)fp8;
- (void)redo:(id)fp8;
- (void)setFilterLabels;
- (BOOL)loadNib;
- (void)bundlesDidChange:(id)fp8;
- (void)orderFrontBundleEditor:(id)fp8;
- (void)showItem:(id)fp8;
- (id)windowWillReturnFieldEditor:(id)fp8 toObject:(id)fp12;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)reloadOutlineView:(id)fp8;
- (void)outlineView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 byItem:(id)fp20;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (id)outlineView:(id)fp8 namesOfPromisedFilesDroppedAtDestination:(id)fp12 forDraggedItems:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;
- (BOOL)commitEditing;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (void)reloadOutlineView;
- (void)setBundleFilter:(id)fp8;
- (void)animationTick:(id)fp8;
- (BOOL)showPatternOptions;
- (void)setShowPatternOptions:(BOOL)fp8;
- (float)splitView:(id)fp8 constrainMinCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (float)splitView:(id)fp8 constrainMaxCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (void)editBundleList:(id)fp8;
- (void)orderOutBundleList:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)testTemplate:(id)fp8;
- (void)newItem:(id)fp8;
- (void)newCommand:(id)fp8;
- (void)newDragCommand:(id)fp8;
- (void)newLanguage:(id)fp8;
- (void)newSnippet:(id)fp8;
- (void)newTemplate:(id)fp8;
- (void)newTemplateFile:(id)fp8;
- (void)newPreference:(id)fp8;
- (void)newBundle:(id)fp8;
- (void)duplicateItem:(id)fp8;
- (void)removeItem:(id)fp8;
- (void)objectDidBeginEditing:(id)fp8;
- (void)objectDidEndEditing:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)testLanguage:(id)fp8;
- (void)selectCurrentMode;
- (void)orderFrontAndShow:(id)fp8;
- (void)showHelpForCommands:(id)fp8;
- (void)showHelpForDragCommands:(id)fp8;
- (void)showHelpForLanguageGrammars:(id)fp8;
- (void)showHelpForPreferences:(id)fp8;
- (void)showHelpForSnippets:(id)fp8;
- (void)showHelpForTemplates:(id)fp8;
- (void)showHelpForMoreBundles:(id)fp8;

@end

@interface OakBundleEditorWindow : NSWindow
{
    NSUndoManager *textViewUndoManager;
}

- (id)currentUndoManager;
- (BOOL)validateMenuItem:(id)fp8;
- (void)undo:(id)fp8;
- (void)redo:(id)fp8;
- (BOOL)canBecomeMainWindow;
- (void)keyDown:(id)fp8;

@end

@interface OakBundleSplitView : NSSplitView
{
}

- (float)dividerThickness;
- (void)drawDividerInRect:(struct _NSRect)fp8;

@end

@interface OakBundleOutlineView : NSOutlineView
{
}

- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;

@end

@interface OakTemplateFileBundleItem : NSObject
{
    TemplateFile *templateFile;
}

+ (id)templateFileBundleItemWithTemplate:(id)fp8;
+ (void)initialize;
- (BOOL)canSetFallbackInput;
- (BOOL)canSetScopeSelector;
- (BOOL)canSetActivation;
- (BOOL)canSetCapturePatterns;
- (id)initTemplateBundleItemWithTemplate:(id)fp8;
- (id)valueForKey:(id)fp8;
- (void)setValue:(id)fp8 forKey:(id)fp12;
- (id)kind;
- (id)name;
- (id)templateFileContents;
- (void)setName:(id)fp8;
- (void)setTemplateFileContents:(id)fp8;
- (id)keyEquivalent;
- (id)editItemTitle;

@end

@interface OakUnifiedBundleItem : NSObject
{
    BundleItem *bundleItem;
    NSString *activationMethod;
    NSString *inputPattern;
    NSString *templateFileContents;
    NSString *preferences;
    NSString *languageGrammar;
}

+ (id)unifiedBundleItemWithBundleItem:(id)fp8;
+ (void)initialize;
- (BOOL)canSetFallbackInput;
- (BOOL)canSetScopeSelector;
- (BOOL)canSetActivation;
- (BOOL)canSetCapturePatterns;
- (id)initWithBundleItem:(id)fp8;
- (id)valueForKey:(id)fp8;
- (void)setValue:(id)fp8 forKey:(id)fp12;
- (id)name;
- (void)setName:(id)fp8;
- (id)scopeSelector;
- (void)setScopeSelector:(id)fp8;
- (id)tabTrigger;
- (void)setTabTrigger:(id)fp8;
- (id)keyEquivalent;
- (void)setKeyEquivalent:(id)fp8;
- (id)draggedFileExtensions;
- (void)setDraggedFileExtensions:(id)fp8;
- (id)editItemTitle;
- (void)setLanguageGrammar:(id)fp8;
- (void)setPreferences:(id)fp8;
- (BOOL)validateSnippet:(id *)fp8 error:(id *)fp12;
- (BOOL)validateLanguageGrammar:(id *)fp8 error:(id *)fp12;
- (BOOL)validatePreferences:(id *)fp8 error:(id *)fp12;

@end

@interface OakBundlePropertiesEditor : NSObject
{
    Bundle *bundle;
    NSMutableDictionary *groups;
    NSMutableSet *separators;
    NSMutableArray *excluded;
}

- (id)init;
- (void)commit;
- (void)setBundle:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 byItem:(id)fp20;
- (BOOL)outlineView:(id)fp8 shouldEditTableColumn:(id)fp12 item:(id)fp16;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(int)fp20;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;

@end

@interface OakButton : NSButton
{
    NSImage *normalImage;
    NSImage *disabledImage;
}

- (id)initWithCoder:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (void)dealloc;

@end

@interface OakCallbackStack : NSObject
{
    struct stack<callback_record, std::deque<callback_record, std::allocator<callback_record>>> *stack;
}

+ (id)callbackStack;
- (id)init;
- (void)dealloc;
- (void)pushSelector:(SEL)fp8 andObject:(id)fp12;
- (void)returnWithSucces:(BOOL)fp8;

@end

@interface OakHTMLOutputManager : NSObject
{
    NSWindow *window;
    WebView *webView;
    NSProgressIndicator *progressIndicator;
    NSString *commandUUID;
    NSString *scriptFile;
    id observedWebView;
    NSDictionary *environment;
    struct _NSRect webViewFrame;
    struct _NSRect pendingVisibleRect;
    BOOL userDidScrollOutput;
    BOOL didMoveProgressIndicator;
    BOOL shouldScrollToBottom;
    BOOL shouldScrollToPendingRect;
    BOOL scrollsOnOutput;
    BOOL isLoadingPage;
    BOOL isBusy;
    int taskPID;
    int writerPID;
}

+ (void)registerIdleWindow:(id)fp8 forUUID:(id)fp12;
+ (void)unregisterIdleWindowForUUID:(id)fp8;
+ (id)idleWindowForUUID:(id)fp8;
+ (void)releaseWebViewAfterDelay:(id)fp8;
- (id)environment;
- (void)setEnvironment:(id)fp8;
- (void)printDocument:(id)fp8;
- (void)updateProgressIndicator;
- (void)setBusy:(BOOL)fp8;
- (void)setLoadingPage:(BOOL)fp8;
- (BOOL)cleanup;
- (void)webView:(id)fp8 addMessageToConsole:(id)fp12;
- (id)webView:(id)fp8 identifierForInitialRequest:(id)fp12 fromDataSource:(id)fp16;
- (id)webView:(id)fp8 resource:(id)fp12 willSendRequest:(id)fp16 redirectResponse:(id)fp20 fromDataSource:(id)fp24;
- (void)removeFrameObserver;
- (void)addFrameObserverToView:(id)fp8;
- (void)webView:(id)fp8 didStartProvisionalLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didCommitLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 willCloseFrame:(id)fp12;
- (void)webView:(id)fp8 didReceiveTitle:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)webViewDidChangeFrame:(id)fp8;
- (id)textView;
- (void)dealloc;
- (void)webView:(id)fp8 windowScriptObjectAvailable:(id)fp12;
- (void)runCommand:(id)fp8 withInput:(id)fp12;
- (void)showOutput:(id)fp8 forCommand:(id)fp12 withEnvironment:(id)fp16;
- (BOOL)windowShouldClose:(id)fp8;
- (void)closeWarningDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)terminateProcess:(int)fp8;
- (void)windowWillClose:(id)fp8;

@end

@interface OakTextMateJSBridge : NSObject
{
    id delegate;
    NSDictionary *environment;
    BOOL isBusy;
}

+ (BOOL)isSelectorExcludedFromWebScript:(SEL)fp8;
+ (id)webScriptNameForSelector:(SEL)fp8;
+ (BOOL)isKeyExcludedFromWebScript:(const char *)fp8;
+ (id)webScriptNameForKey:(const char *)fp8;
- (id)environment;
- (void)setEnvironment:(id)fp8;
- (void)dealloc;
- (void)setIsBusy:(BOOL)fp8;
- (void)setDelegate:(id)fp8;
- (void)log:(id)fp8;
- (id)system:(id)fp8 handler:(id)fp12;

@end

@interface OakJSShellCommand : NSObject
{
    NSDictionary *environment;
    id onreadoutput;
    id onreaderror;
    NSMutableData *outputData;
    NSMutableData *errorData;
    int status;
    BOOL didTerminate;
    NSString *outputString;
    NSString *errorString;
    NSTask *task;
    NSPipe *stdInput;
    NSPipe *stdOutput;
    NSPipe *stdError;
    id endHandler;
}

+ (BOOL)isKeyExcludedFromWebScript:(const char *)fp8;
+ (id)webScriptNameForKey:(const char *)fp8;
+ (BOOL)isSelectorExcludedFromWebScript:(SEL)fp8;
+ (id)webScriptNameForSelector:(SEL)fp8;
- (id)environment;
- (void)setEnvironment:(id)fp8;
- (void)checkForData;
- (id)outputString;
- (id)errorString;
- (void)write:(id)fp8;
- (void)close;
- (void)cancel;
- (void)terminateTask:(id)fp8;
- (void)dataAvailable:(id)fp8;
- (void)setOnreadoutput:(id)fp8;
- (void)setOnreaderror:(id)fp8;
- (void)taskDidTerminate:(id)fp8;
- (void)finalizeForWebScript;
- (id)runTaskWithCommand:(id)fp8;
- (void)dealloc;

@end

@interface OakTextView (ExecuteCommand)
+ (id)defaultEnvironmentVariables;
- (id)wordAtCaret;
- (id)xmlRepresentationForSelection:(BOOL)fp8;
- (id)xmlRepresentation;
- (id)xmlRepresentationForSelection;
- (struct _NSPoint)positionForWindowUnderCaret;
- (id)environmentVariables;
- (void)extendSelectionInScope:(id)fp8;
- (void)selectCurrentScope:(id)fp8;
- (BOOL)selectFallbackInputForCommand:(id)fp8;
- (id)inputForCommand:(id)fp8 offset:(id *)fp12;
- (id)inputForCommand:(id)fp8;
- (void)executeCommandWithOptions:(id)fp8;
- (void)selectCommandResult:(id)fp8;
@end

@interface WebView (OakFindNextPrevious)
- (void)viewSource:(id)fp8;
- (void)copySelectionToFindPboard:(id)fp8;
- (BOOL)findWithDirection:(BOOL)fp8;
- (void)findNext:(id)fp8;
- (void)findPrevious:(id)fp8;
- (id)findWithOptions:(id)fp8;
@end

@interface OakDateFormatter : NSDateFormatter
{
}

- (id)stringForObjectValue:(id)fp8;
- (id)attributedStringForObjectValue:(id)fp8 withDefaultAttributes:(id)fp12;

@end

@interface OakDocument : NSObject
{
    NSString *filename;
    NSDate *fileModificationDate;
    unsigned int untitledCount;
    unsigned int lastSavedMemento;
    // Error parsing type: ^{storage={detail="data"{vector<shared_buffer<text::char_t>,std::allocator<shared_buffer<text::char_t> > >="_M_impl"{_Vector_impl="_M_start"^{shared_buffer<text::char_t>}"_M_finish"^{shared_buffer<text::char_t>}"_M_end_of_storage"^{shared_buffer<text::char_t>}}}"observers"{list<text::storage::observer*,std::allocator<text::storage::observer*> >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"mutex"{_opaque_pthread_mutex_t="__sig"l"__opaque"[40C]}}{kill_buffer_t="data"{vector<unichar,std::allocator<unichar> >="_M_impl"{_Vector_impl="_M_start"^S"_M_finish"^S"_M_end_of_storage"^S}}"memento"I"position"{iterator="line"I"column"I"storage"^{storage}}"disabled"B}{vector<text::storage::undo_record,std::allocator<text::storage::undo_record> >="_M_impl"{_Vector_impl="_M_start"^{undo_record}"_M_finish"^{undo_record}"_M_end_of_storage"^{undo_record}}}IIII{undo_manager="storage""stack"{stack<text::undo_manager::node,std::deque<text::undo_manager::node, std::allocator<text::undo_manager::node> > >="c"{deque<text::undo_manager::node,std::allocator<text::undo_manager::node> >="_M_impl"{_Deque_impl="_M_map"^^{node}"_M_map_size"I"_M_start"{_Deque_iterator<text::undo_manager::node,text::undo_manager::node&,text::undo_manager::node*>="_M_cur"^{node}"_M_first"^{node}"_M_last"^{node}"_M_node"^^{node}}"_M_finish"{_Deque_iterator<text::undo_manager::node,text::undo_manager::node&,text::undo_manager::node*>="_M_cur"^{node}"_M_first"^{node}"_M_last"^{node}"_M_node"^^{node}}}}}}}, name: storage
    struct observer *observer;
    struct vector<text::view*, std::allocator<text::view*>> *viewCache;
    struct vector<text::view*, std::allocator<text::view*>> *openViews;
    int fileEncoding;
    int lineEnding;
    BOOL isDocumentEdited;
    BOOL byteOrderMark;
    unsigned int openCount;
    BOOL documentHasBeenSaved;
    BOOL hideFromRecentMenu;
    BOOL fileModifiedOnDiskAndWaitingForUser;
    NSDictionary *auxiliaryFileInfo;
}

+ (void)initialize;
+ (id)document;
+ (id)documentWithContentsOfFile:(id)fp8;
+ (void)sendAsyncAppleEvent:(id)fp8;
+ (int)defaultFileEncoding;
+ (int)defaultLineEnding;
- (id)initWithStorage:(struct storage *)fp8;
- (id)init;
- (id)initWithContentsOfFile:(id)fp8;
- (void)release;
- (BOOL)hideFromRecentMenu;
- (void)setHideFromRecentMenu:(BOOL)fp8;
- (BOOL)shouldSaveMetaData;
- (void)saveMetaData:(id)fp8 forView:(const struct view *)fp12;
- (void)dealloc;
- (unsigned int)length;
- (BOOL)byteOrderMark;
- (void)setByteOrderMark:(BOOL)fp8;
- (void)setFileEncodingAndLineEndingsToDefaults;
- (BOOL)writeToFile:(id)fp8;
- (id)displayName;
- (BOOL)isDocumentEdited;
- (void)setDocumentEdited:(BOOL)fp8;
- (id)filename;
- (id)fileModificationDate;
- (void)setFileModificationDate:(id)fp8;
- (void)setFilename:(id)fp8;
- (struct view *)obtainView;
- (void)releaseView:(struct view *)fp8;
- (id)metaData;
- (void)setMetaData:(id)fp8;
- (BOOL)checkForFilesystemChanges;
- (BOOL)reopenWithEncoding:(int)fp8;
- (int)fileEncoding;
- (void)setFileEncoding:(int)fp8;
- (int)lineEnding;
- (void)setLineEnding:(int)fp8;
- (BOOL)openDocument;
- (void)closeDocument;

@end

@interface OakDocumentCache : NSObject
{
    NSMutableDictionary *documents;
}

- (id)init;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;

@end

@interface NSString (xattr)
- (void)_saveStringMetadata:(id)fp8 forKey:(id)fp12;
- (void)savePlistMetadata:(id)fp8 forKey:(id)fp12;
@end

@interface OakDocumentController : NSWindowController
{
    OakTextView *textView;
    id statusBar;
    OakDocument *textDocument;
    BOOL snapshotFrame;
    BOOL showStatusBarView;
    NSMutableDictionary *bindingProxy;
}

+ (void)initialize;
- (id)textView;
- (void)dealloc;
- (void)setTextDocument:(id)fp8;
- (void)goToFileCounterpart:(id)fp8;
- (void)layoutWindow;
- (void)toggleShowStatusBarView:(id)fp8;
- (id)toggleShowStatusBarViewMenuTitle;
- (void)windowDidLoad;
- (void)windowDidResize:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (void)savePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)saveAs:(id)fp8;
- (void)saveDocumentAs:(id)fp8;
- (void)saveDocument:(id)fp8;
- (BOOL)isDocumentEdited;
- (BOOL)canBeUsedForNewDocument;
- (void)applicationWillResignActiveNotification:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)askToSaveAndCallBack:(id)fp8;
- (void)closeWarningDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)closeWindow:(id)fp8 andCallStack:(id)fp12;
- (BOOL)validateMenuItem:(id)fp8;
- (void)revealFileInFinder:(id)fp8;
- (BOOL)textView:(id)fp8 willExecuteCommand:(id)fp12;
- (void)selectCommandResult:(id)fp8;

@end

@interface OakMacroContinuation : NSObject
{
    OakTextView *textView;
    NSDictionary *command;
    BundleItem *bundleItem;
}

+ (id)macroContinuationForTextView:(id)fp8 withCommand:(id)fp12;
- (void)dealloc;
- (void)delayedExecuteBundleItem:(id)fp8;
- (void)continueMacro:(id)fp8 andCallStack:(id)fp12;

@end

@interface OakTextView (DragCommand)
- (BOOL)dropFile:(id)fp8;
@end

@interface OakExecuteCommandManager : NSObject
{
    NSPanel *executeCommandPanel;
    NSMenu *executeCommandMenu;
    NSMutableDictionary *options;
    NSMutableArray *history;
    NSMutableArray *editors;
}

+ (void)initialize;
+ (id)sharedInstance;
- (id)init;
- (void)applicationWillTerminate:(id)fp8;
- (void)populateMenu;
- (void)clearMenu:(id)fp8;
- (void)addToHistory:(id)fp8;
- (void)awakeFromNib;
- (void)orderFrontExecuteCommandPanel:(id)fp8;
- (void)setInput:(int)fp8;
- (void)setOutput:(int)fp8;
- (int)input;
- (int)output;
- (void)executeCommandWithTag:(id)fp8;
- (void)performExecuteCommand:(id)fp8;
- (void)objectDidBeginEditing:(id)fp8;
- (void)objectDidEndEditing:(id)fp8;

@end

@interface OakFileChooserWindow : NSPanel
{
    NSText *searchFieldEditor;
}

- (id)fieldEditor:(BOOL)fp8 forObject:(id)fp12;
- (void)dealloc;
- (void)keyDown:(id)fp8;

@end

@interface OakFileChooser : OakTableViewController
{
    NSArray *allItems;
    NSArray *displayItems;
    NSDictionary *displayPrefix;
    NSString *filterString;
    OakProjectController *projectController;
    NSSearchField *searchField;
    NSDrawer *drawer;
    id statusBar;
}

+ (void)initialize;
- (void)windowDidLoad;
- (void)userDefaultsDidChange:(id)fp8;
- (void)orderFront:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)accept:(id)fp8;
- (void)cancel:(id)fp8;
- (void)dealloc;
- (void)selectDefaultItem;
- (void)search:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)rearrangeObjects;
- (void)setFilterString:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface OakTableViewController : NSWindowController
{
    NSTableView *tableView;
}

- (void)moveUp:(id)fp8;
- (void)moveDown:(id)fp8;
- (void)movePageUp:(id)fp8;
- (void)movePageDown:(id)fp8;
- (void)pageUp:(id)fp8;
- (void)pageDown:(id)fp8;
- (void)scrollPageUp:(id)fp8;
- (void)scrollPageDown:(id)fp8;
- (void)moveToBeginningOfDocument:(id)fp8;
- (void)moveToEndOfDocument:(id)fp8;

@end

@interface OakSearchFieldEditor : NSTextView
{
}

- (void)keyDown:(id)fp8;
- (void)doCommandBySelector:(SEL)fp8;

@end

@interface OakFileChooserStatusBar : NSView
{
    NSString *string;
    NSString *filterString;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setString:(id)fp8;
- (void)setFilterString:(id)fp8;
- (id)filterString;

@end

@interface DuffStringRanker (NormalizeFilterString)
+ (id)prepareFilterString:(id)fp8;
@end

@interface OakFilenameTextField : NSTextField
{
}

- (void)selectBaseName:(id)fp8;
- (BOOL)becomeFirstResponder;

@end

@interface OakFileTemplateManager : NSObject
{
    NSMutableArray *templateArray;
    int selectedItemTag;
}

+ (id)sharedInstance;
+ (void)initialize;
- (id)init;
- (void)addTemplatesToMenu:(id)fp8;
- (int)selectedItemTag;
- (void)setSelectedItemTag:(int)fp8;
- (id)extensionForTemplateWithTag:(int)fp8;
- (id)filesForTemplate:(id)fp8 withVariables:(id)fp12;
- (id)filesForTemplateWithTag:(int)fp8 andVariables:(id)fp12;

@end

@interface OakFindManager : NSObject
{
    NSPanel *findPanel;
    NSPanel *findInProjectPanel;
    NSTextField *findStatusText;
    NSButton *replaceAllButton;
    NSButton *findInProjectReplaceAllButton;
    NSOutlineView *findInProjectOutlineView;
    NSComboBox *findComboBox;
    NSComboBox *replaceComboBox;
    NSTextField *replaceLabel;
    NSButton *toggleWindowSizeButton;
    NSArray *findInProjectResults;
    NSArray *findInProjectOutlineResults;
    NSMutableArray *editors;
    NSMutableDictionary *options;
    int changeCount;
    BOOL canReplaceInProject;
}

+ (void)initialize;
+ (id)sharedInstance;
- (id)init;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)applicationWillTerminate:(id)fp8;
- (void)applicationWillResignActiveNotification:(id)fp8;
- (void)applicationDidBecomeActiveNotification:(id)fp8;
- (BOOL)loadNib;
- (void)didDoubleClickFindInProjectList:(id)fp8;
- (void)didBecomeMainWindow:(id)fp8;
- (void)orderFrontFindPanel:(id)fp8;
- (void)orderFrontFindInProjectPanel:(id)fp8;
- (void)writeStringToFindPboard:(id)fp8;
- (id)options;
- (void)setOptions:(id)fp8;
- (void)objectDidBeginEditing:(id)fp8;
- (void)objectDidEndEditing:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)commitEditing;
- (void)performFindAction:(id)fp8;
- (void)replaceAll:(id)fp8;
- (void)replaceAllInSelection:(id)fp8;
- (id)convertFindResultsToOutline:(id)fp8;
- (void)performFindInProjectAction:(id)fp8;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)raiseControls;
- (void)lowerControls;
- (void)toggleWindowSize:(id)fp8;
- (unsigned int)comboBox:(id)fp8 indexOfItemWithStringValue:(id)fp12;
- (id)comboBox:(id)fp8 objectValueForItemAtIndex:(int)fp12;
- (int)numberOfItemsInComboBox:(id)fp8;

@end

@interface OakCompletionTextField : NSComboBox
{
}

- (id)textView:(id)fp8 completions:(id)fp12 forPartialWordRange:(struct _NSRange)fp16 indexOfSelectedItem:(int *)fp24;

@end

@interface OakFindInProjectOutlineView : NSOutlineView
{
}

- (void)mouseDown:(id)fp8;

@end

@interface OakNonKeyButton : NSButton
{
}

- (BOOL)canBecomeKeyView;

@end

@interface OakFindPanel : NSPanel
{
}

- (void)sendEvent:(id)fp8;

@end

@interface OakTextView (CompletionMatches)
- (id)matchesForString:(id)fp8;
@end

@interface OakReloadBundlesScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OakInsertTextScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OakGetURLScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OakGotoLineHelper : NSObject
{
    id options;
}

+ (id)gotoLineHelperWithOptions:(id)fp8;
- (id)initWithOptions:(id)fp8;
- (void)dealloc;
- (void)windowDidBecomeKey:(id)fp8;

@end

@interface AppDelegate (OpenURL)
- (BOOL)openURLWithOptions:(id)fp8;
@end

@interface OakImageAndTextCell : NSTextFieldCell
{
    NSImage *image;
}

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setImage:(id)fp8;
- (id)image;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)selectWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 start:(int)fp36 length:(int)fp40;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (struct _NSSize)cellSize;

@end

@interface OakInformationPanel : NSObject
{
    NSWindow *fileInfoPanel;
    NSWindow *folderInfoPanel;
    NSWindow *groupInfoPanel;
    NSWindow *projectInfoPanel;
    NSObjectController *objectController;
    id item;
    NSMutableArray *projectVariables;
    NSString *name;
    NSString *path;
    NSString *fullPath;
    NSString *filePattern;
    NSString *folderPattern;
    BOOL saveAsAbsolutePath;
    id delegate;
}

- (id)init;
- (void)dealloc;
- (void)windowWillClose:(id)fp8;
- (void)showWindowForProjectVariables:(id)fp8;
- (void)showWindowFor:(id)fp8 delegate:(id)fp12;
- (void)orderFrontChoosePathSheet:(id)fp8;
- (void)choosePathPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)setName:(id)fp8;
- (void)dirtyItem:(id)fp8 andChildren:(BOOL)fp12;
- (void)updateOutlineView;
- (void)setFilePattern:(id)fp8;
- (void)setFolderPattern:(id)fp8;
- (void)setSaveAsAbsolutePath:(id)fp8;

@end

@interface OakDefaultProjectVariable : NSObject
{
}

- (id)init;

@end

@interface OakKeyBindingManager : NSObject
{
    NSDictionary *keyBindings;
}

+ (id)sharedInstance;
- (id)allKeyBindingFiles;
- (id)init;
- (BOOL)interpretKeyEvent:(id)fp8 forTextView:(id)fp12;
- (SEL)selectorForEvent:(id)fp8;

@end

@interface OakKeyEquivalentFieldEditor : NSTextView <OakKeyObserver>
{
    BOOL hotkeyEditing;
    NSString *keyString;
    int trackingRectTag;
    BOOL hover;
    BOOL pressed;
    BOOL mouseDownInRemoveButtonFrame;
}

- (struct _NSRect)removeButtonFrame;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)viewFrameDidChange:(id)fp8;
- (BOOL)shouldSwallowEvent:(id)fp8;
- (void)resetCursorRects;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (id)string;

@end

@interface OakKeyEquivalentCell : NSTextFieldCell
{
}

- (id)initTextCell:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)selectWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 start:(int)fp36 length:(int)fp40;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)endEditing:(id)fp8;

@end

@interface OakKeyEquivalent : NSControl
{
    NSTextView *fieldEditor;
    NSString *keyString;
    NSMutableArray *observers;
    BOOL isObservingFocus;
    BOOL shouldSelectNextKeyView;
    int isDiscarding;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)canBecomeKeyView;
- (BOOL)acceptsFirstResponder;
- (void)windowDidChangeKey:(id)fp8;
- (BOOL)becomeFirstResponder;
- (struct _NSRect)fieldEditorFrame;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)setUpFieldEditor:(id)fp8;
- (void)textDidChange:(id)fp8;
- (void)textDidEndEditing:(id)fp8;
- (BOOL)commitEditing;
- (void)discardEditing;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)makeFocusRingDirty:(id)fp8;
- (void)setKeyString:(id)fp8;
- (id)value;
- (void)setValue:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)bind:(id)fp8 toObject:(id)fp12 withKeyPath:(id)fp16 options:(id)fp20;
- (void)unbind:(id)fp8;
- (void)dealloc;

@end

@interface OakKeyEvent : NSObject
{
    NSString *key;
    unsigned int qualifiers;
}

+ (id)keyEvent;
+ (id)keyEventWithEvent:(id)fp8;
+ (id)keyEventWithString:(id)fp8;
- (id)initWithString:(id)fp8;
- (id)initWithKey:(id)fp8 andQualifiers:(unsigned int)fp12;
- (id)initWithEvent:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)stringRepresentation;
- (id)key;
- (void)setKey:(id)fp8;
- (unsigned int)qualifiers;
- (void)setQualifiers:(unsigned int)fp8;
- (void)setKey:(id)fp8 andQualifiers:(unsigned int)fp12;
- (id)glyphsForModifiers:(unsigned int)fp8;
- (id)modifierGlyphs;
- (id)keyGlyph;
- (id)glyphRepresentation;
- (id)description;

@end

@interface OakMacPADManager : NSObject
{
    NSTimer *softwareUpdateTimer;
    int typeOfCheck;
    BOOL manualCheck;
    BOOL suspendAutomaticVersionCheck;
    BOOL isPerformingVersionCheck;
}

+ (id)sharedInstance;
+ (void)initialize;
- (void)versionCheck:(id)fp8;
- (id)init;
- (void)scheduleNewVersionCheck;
- (void)didWakeNotification:(id)fp8;
- (void)timerDidFire:(id)fp8;
- (void)scheduledVersionCheck:(id)fp8;
- (void)performManualVersionCheck:(id)fp8;
- (void)returnSuccess:(id)fp8;
- (void)returnError:(id)fp8;

@end

@interface OakMacroManager : NSObject
{
}

+ (id)sharedInstance;
- (id)init;
- (id)scratchMacro;
- (void)setScratchMacro:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)saveScratchMacro:(id)fp8;
- (void)playMacroWithTag:(id)fp8;

@end

@interface OakMenuButton : NSButton
{
    NSMenu *actionMenu;
    NSOutlineView *outlineView;
    id delegate;
    NSPopUpButtonCell *popUpMenuCell;
}

- (void)dealloc;
- (void)awakeFromNib;
- (BOOL)validateMenuItem:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)popUpMenuDidClose:(id)fp8;
- (void)projectRenameFile:(id)fp8;

@end

@interface OakOutlineView : NSOutlineView
{
    int clickedRow;
}

- (id)initWithCoder:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)shouldActivate;
- (BOOL)acceptsFirstResponder;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)textDidEndEditing:(id)fp8;
- (int)clickedRow;
- (void)keyDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface NSBezierPath (RoundedRectangle)
+ (id)bezierPathWithRoundRectInRect:(struct _NSRect)fp8 radius:(float)fp24;
@end

@interface OakPasteboardManager : NSObject
{
    NSPanel *sharedPanel;
    NSTableView *tableView;
    NSMutableArray *stack;
    unsigned int pasteIndex;
    int changeCount;
}

+ (id)sharedInstance;
- (id)init;
- (void)windowDidResignKey:(id)fp8;
- (void)orderFrontPasteboardPanel:(id)fp8;
- (id)memento;
- (void)setMemento:(id)fp8;
- (void)storeClip:(id)fp8;
- (id)currentClip;
- (id)nextClip;
- (id)previousClip;
- (BOOL)hasClip;
- (void)applicationWillResignActiveNotification:(id)fp8;
- (void)applicationDidBecomeActiveNotification:(id)fp8;
- (void)pasteboard:(id)fp8 provideDataForType:(id)fp12;
- (void)tableViewSelectionDidChange:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface OakTextClip : NSObject
{
    struct vector<unichar, std::allocator<unichar>> *text;
    unsigned int indent;
    BOOL rectangular;
}

- (void)dealloc;
- (struct vector<unichar, std::allocator<unichar>> *)vector;
- (unsigned int)indent;
- (BOOL)rectangular;

@end

@interface OakColorWell : NSColorWell
{
}

+ (void)registerColorWell:(id)fp8;
+ (void)unregisterColorWell:(id)fp8;
+ (void)deactivateAll;
- (void)activate:(BOOL)fp8;
- (void)deactivate;

@end

@interface OakColorWellCell : NSCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (BOOL)trackMouse:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28 untilMouseUp:(BOOL)fp32;

@end

@interface OakSettingsTableView : NSTableView
{
}

- (void)drawRow:(int)fp8 clipRect:(struct _NSRect)fp12;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface OakFontsAndColorsController : NSObject
{
    NSWindow *preferencesWindow;
    NSPopUpButton *themePopUpButton;
    NSTableView *settingsTableView;
    NSPanel *themeListSheet;
    NSTableView *themesTableView;
    NSTextField *themeCommentTextField;
    NSColor *foregroundColor;
    NSColor *backgroundColor;
    NSColor *selectionColor;
    NSColor *caretColor;
    NSColor *lineHighlightColor;
    NSColor *invisiblesColor;
    NSMutableArray *settingsArray;
    id selection;
    NSObjectController *themeObjectController;
    id selectedTheme;
    NSMutableArray *themesArray;
    unsigned int disableThemeBroadcasting;
    BOOL isDirty;
    BOOL isEditingColorCell;
    int colorCellRow;
    NSString *colorCellIdentifier;
    BOOL didInitialize;
}

+ (id)sharedInstance;
- (id)init;
- (void)setDirty:(BOOL)fp8;
- (id)pathForNewFile:(id)fp8 inDirectory:(id)fp12;
- (BOOL)saveTheme:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)broadcastNewTheme;
- (id)selectableScopes;
- (id)font;
- (void)didChangeFont:(id)fp8;
- (void)deactivate;
- (void)didChangeColorPanel:(id)fp8;
- (void)didCloseColorPanel:(id)fp8;
- (void)populateThemePopUp;
- (void)awakeFromNib;
- (void)singleClick:(id)fp8;
- (void)addSetting:(id)fp8;
- (void)removeSetting:(id)fp8;
- (void)acceptThemeListChanges:(id)fp8;
- (void)cancelThemeListChanges:(id)fp8;
- (void)orderOutThemeList;
- (void)themeDidChange;
- (void)changeTheme:(id)fp8;
- (void)addTheme:(id)fp8;
- (void)duplicateTheme:(id)fp8;
- (void)removeTheme:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (BOOL)tableView:(id)fp8 writeRowsWithIndexes:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(int)fp20;
- (void)reloadData:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)setValue:(id)fp8 forKey:(id)fp12;
- (void)setValue:(id)fp8 forKeyPath:(id)fp12;
- (void)installTheme:(id)fp8;

@end

@interface OakPreferencesManager : NSWindowController
{
    NSView *generalPrefs;
    NSView *textEditingPrefs;
    NSView *fontsAndColorsPrefs;
    NSView *softwareUpdatePrefs;
    NSView *printingPrefs;
    NSView *advancedPrefs;
    NSArrayController *arrayController;
    OakFontsAndColorsController *fontsAndcolorsController;
    NSMutableArray *shellVariables;
    NSMutableDictionary *toolbarItems;
    NSString *selectedToolbarItem;
    NSString *creatorCodeAction;
    BOOL canSetCreatorCode;
}

+ (void)initialize;
+ (id)sharedInstance;
- (id)init;
- (void)setCreatorCodeAction:(id)fp8;
- (void)dealloc;
- (void)orderFrontPreferences:(id)fp8;
- (void)privateChangeFont:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)windowDidLoad;
- (void)windowWillClose:(id)fp8;
- (void)windowDidChangeKeyStatus:(id)fp8;
- (id)shellVariables;
- (void)setShellVariables:(id)fp8;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarSelectableItemIdentifiers:(id)fp8;
- (float)toolbarHeight;
- (void)selectToolbarItem:(id)fp8;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;

@end

@interface OakProjectController : NSWindowController
{
    OakTabBarView *tabBarView;
    OakTextView *textView;
    id statusBar;
    NSDrawer *groupsAndFilesDrawer;
    NSOutlineView *outlineView;
    NSImageView *imageView;
    NSColor *backgroundColor;
    NSWindow *newFileSheet;
    NSPopUpButton *newFileTemplatePopupButton;
    NSString *newFileSheetFilename;
    NSString *newFileSheetDirectory;
    int newFileCurrentTemplateTag;
    NSString *projectDirectory;
    NSString *filename;
    NSMutableArray *rootItems;
    NSMutableDictionary *currentDocument;
    NSSet *allFilenames;
    NSMutableDictionary *fileMetaData;
    NSMutableArray *projectVariables;
    BOOL showTabBarView;
    BOOL showStatusBarView;
    BOOL canOpenInformationPanel;
    BOOL isScratchProject;
    unsigned int untitledCount;
    BOOL snapshotFrame;
    NSArray *itemsBeingDragged;
    NSMutableDictionary *bindingProxy;
    NSMutableArray *observingItems;
    OakFileChooser *fileChooser;
    BOOL boldFolders;
}

+ (void)initialize;
+ (BOOL)canOpenFile:(id)fp8;
- (id)init;
- (id)initWithContentsOfFile:(id)fp8;
- (void)prepareToDisposeItems:(id)fp8;
- (void)dealloc;
- (void)applicationWillTerminate:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (BOOL)isItemChanged:(id)fp8;
- (void)applicationDidBecomeActiveNotification:(id)fp8;
- (id)textView;
- (id)documentForItem:(id)fp8;
- (id)filename;
- (id)projectDirectory;
- (void)setProjectDirectory:(id)fp8;
- (void)setFilename:(id)fp8;
- (void)setIsScratchProject:(BOOL)fp8;
- (id)displayName;
- (id)windowTitle;
- (void)layoutWindow;
- (void)toggleShowTabBarView:(id)fp8;
- (void)toggleShowStatusBarView:(id)fp8;
- (id)toggleShowTabBarViewMenuTitle;
- (id)toggleShowStatusBarViewMenuTitle;
- (void)openProjectDrawer:(id)fp8;
- (void)windowDidLoad;
- (void)windowDidResize:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (void)setCloseTabActionAsPrimary:(BOOL)fp8;
- (void)tabBarView:(id)fp8 didOpenTab:(id)fp12;
- (void)tabBarView:(id)fp8 didCloseTab:(id)fp12;
- (void)windowDidChangeKey:(id)fp8;
- (void)setCurrentDocument:(id)fp8;
- (void)tabBarView:(id)fp8 didSelectTab:(id)fp12;
- (void)selectItem:(id)fp8;
- (id)itemWithPath:(id)fp8;
- (void)performCloseTab:(id)fp8;
- (void)performCloseAllTabs:(id)fp8;
- (BOOL)tabBarView:(id)fp8 shouldCloseTab:(id)fp12;
- (void)saveProject:(id)fp8;
- (void)saveProjectAs:(id)fp8;
- (void)saveProjectPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (id)mutableDocumentTreeForItems:(id)fp8;
- (id)savableDocumentTreeForItems:(id)fp8 inDirectory:(id)fp12;
- (BOOL)writeToFile:(id)fp8;
- (void)insertItems:(id)fp8 before:(id)fp12;
- (void)insertItemsBeforeSelection:(id)fp8;
- (void)setNewFileCurrentTemplateTag:(int)fp8;
- (void)projectNewFile:(id)fp8;
- (void)newFileSheetPopUpDidChange:(id)fp8;
- (void)performNewFileSheetAction:(id)fp8;
- (void)projectAddFiles:(id)fp8;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;
- (void)addFilesPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)projectNewGroup:(id)fp8;
- (void)projectGroupFiles:(id)fp8;
- (BOOL)selectedRowsShouldBeRemovedInOutlineView:(id)fp8;
- (void)projectRemoveFiles:(id)fp8;
- (void)removeProjectFilesWarningDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)userDefaultsDidChange:(id)fp8;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 byItem:(id)fp20;
- (void)singleClickItem:(id)fp8;
- (void)doubleClickItem:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)goToNextFile:(id)fp8;
- (void)goToPreviousFile:(id)fp8;
- (void)goToFileCounterpart:(id)fp8;
- (void)revealInProject:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)_getOakTextViewInstance:(id)fp8;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (id)addFiles:(id)fp8 toArray:(id)fp12 atIndex:(int)fp16;
- (id)addFiles:(id)fp8 toArray:(id)fp12 atIndex:(int)fp16 fileFilter:(id)fp20 folderFilter:(id)fp24;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;
- (void)saveDocument:(id)fp8;
- (void)saveDocumentAs:(id)fp8;
- (void)saveDocumentPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)saveAllDocuments:(id)fp8;
- (void)applicationWillResignActiveNotification:(id)fp8;
- (void)openFileInNewWindow:(id)fp8;
- (void)revealFileInFinder:(id)fp8;
- (void)openFileWithFinder:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (unsigned int)numberOfModifiedDocuments;
- (BOOL)isDocumentEdited;
- (BOOL)windowShouldClose:(id)fp8;
- (void)askToSaveProjectAndCallBack:(id)fp8;
- (void)saveProjectWarningDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)askToSaveModifiedDocumentsAndCallBack:(id)fp8;
- (void)saveModifiedDocumentsWarningDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)askToSaveAndCallBack:(id)fp8;
- (void)closeWindow:(id)fp8 andCallStack:(id)fp12;
- (id)resultForMatchInLine:(id)fp8 fromLine:(unsigned long)fp12 fromColumn:(unsigned long)fp16 toLine:(unsigned long)fp20 toColumn:(unsigned long)fp24 memento:(unsigned long)fp28 fileInfo:(id)fp32;
- (id)findString:(id)fp8 inDocument:(id)fp12 withOptions:(id)fp16;
- (id)findInProjectWithOptions:(id)fp8;
- (void)selectFindInProjectResult:(id)fp8;
- (BOOL)textView:(id)fp8 willExecuteCommand:(id)fp12;
- (void)harvestItemsForArray:(id)fp8 foldersInto:(id)fp12 andFilesInto:(id)fp16;
- (id)findProjectDirectory;
- (id)environmentVariables;
- (void)selectCommandResult:(id)fp8;
- (void)toggleGroupsAndFilesDrawer:(id)fp8;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (void)projectShowInformationPanel:(id)fp8;
- (void)toggleTreatFileAsText:(id)fp8;
- (void)goToFile:(id)fp8;
- (id)openFiles:(id)fp8;

@end

@interface OakIconCache : NSObject
{
    NSMutableDictionary *cache;
    NSDictionary *bindings;
    NSImage *folderIcon;
    NSImage *updatingFolderIcon;
}

+ (id)sharedInstance;
- (id)init;
- (id)iconForFolder;
- (id)iconForUpdatingFolder;
- (id)modifiedVersion:(id)fp8;
- (id)iconForFileType:(id)fp8 isModified:(BOOL)fp12;
- (id)applySymbolicLinkArrow:(id)fp8;

@end

@interface OakRegexpMatch : NSObject
{
    struct map<int, std::pair<int, int>, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int>>>> *captures;
}

+ (id)regexpMatchWithCaptures:;
- (id)initWithCaptures:;
- (void)dealloc;

@end

@interface OakRegistrationManager : NSObject
{
    NSPanel *registrationPanel;
    NSView *registrationInfoView;
    NSView *enterLicenseView;
    NSTextField *ownerNameTextField;
    NSString *owner;
    NSString *licenseKey;
    NSData *imageData;
    NSString *registrationType;
}

+ (void)initialize;
+ (id)sharedInstance;
- (id)init;
- (BOOL)canRegister;
- (id)ownerPortrait;
- (void)setOwner:(id)fp8;
- (void)setLicenseKey:(id)fp8;
- (void)setLicenseInfo:;
- (int)orderFrontRegistrationPanel:(id)fp8;
- (void)changeToLicenseInformationView:(id)fp8;
- (void)changeLicense:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)continue:(id)fp8;
- (void)lostLicense:(id)fp8;
- (void)buyOnline:(id)fp8;

@end

@interface OakTextView (snippets)
- (void)leaveCodeSnippetEditing;
- (void)nextSnippetField:(id)fp8;
- (void)previousSnippetField:(id)fp8;
- (void)insertBacktab:(id)fp8;
- (void)deleteTabTrigger:(id)fp8;
- (BOOL)expandCodeSnippet:(id)fp8;
- (void)insertSnippet:(id)fp8;
- (void)insertSnippetWithOptions:(id)fp8;
@end

@interface OakStatusBar : NSView
{
    OakTabSizeWindowController *tabSizeWindowController;
    NSImage *recordingMacroImage;
    struct _NSRect recordingMacroImageRect;
    NSTimer *recordingMacroTimer;
    float animationTime;
    NSMutableArray *observers;
    struct _NSRect lineColumnRect;
    struct _NSRect languageRect;
    struct _NSRect tabSettingsRect;
    struct _NSRect bundlePopUpRect;
    struct _NSRect symbolPopUpRect;
    NSPopUpButtonCell *languagePopUpButtonCell;
    NSArray *languageChoices;
    int selectedLanguageIndex;
    int lineNumber;
    int columnNumber;
    NSString *currentMode;
    id currentSymbol;
    int tabSize;
    BOOL softTabs;
    BOOL isRecordingMacro;
    BOOL enabled;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setFrame:(struct _NSRect)fp8;
- (void)updateMacroRecordingAnimation:(id)fp8;
- (void)setLineNumber:(int)fp8;
- (void)setColumnNumber:(int)fp8;
- (void)setTabSize:(int)fp8;
- (void)setSoftTabs:(BOOL)fp8;
- (void)setCurrentSymbol:(id)fp8;
- (void)setIsRecordingMacro:(BOOL)fp8;
- (void)setCurrentMode:(id)fp8;
- (void)layout;
- (void)setEnabled:(BOOL)fp8;
- (void)drawText:(id)fp8 inRect:(struct _NSRect)fp12;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)disposeMenuChoices:(id)fp8;
- (void)popUpMenuDidClose:(id)fp8;
- (void)showPopUpCell:(id)fp8 withFrame:(struct _NSRect)fp12;
- (void)showBundlePopUp;
- (void)mouseDown:(id)fp8;
- (void)toggleKeepSymbolsAlphabetized:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)performLanguageMenuChoice:(id)fp8;
- (void)performSymbolMenuChoice:(id)fp8;
- (void)performTabSettingsMenuChoice:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)bind:(id)fp8 toObject:(id)fp12 withKeyPath:(id)fp16 options:(id)fp20;
- (void)unbind:(id)fp8;

@end

@interface OakTabSizeWindowController : NSWindowController
{
}

- (void)didMoveSlider:(id)fp8;

@end

@interface OakTabBarView : NSView
{
    id delegate;
    NSMutableArray *tabs;
    struct _NSRect clipIndicatorRect;
    struct vector<NSTrackingRectTag, std::allocator<NSTrackingRectTag>> *trackingRectTags;
    struct _NSPoint mouseDownPosition;
    struct OakClickInfo mouseDownInfo;
    OakTab *draggedTab;
    int draggedTabNewIndex;
    BOOL drawClipIndicator;
    NSMutableArray *toolTips;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (void)closeTab:(id)fp8;
- (void)selectTab:(id)fp8;
- (void)selectNextTab:(id)fp8;
- (void)selectPreviousTab:(id)fp8;
- (void)sizeTabsToFitAndChangeTrackingRects:(BOOL)fp8;
- (void)sizeTabsToFit;
- (void)updateWindowKeyStateForTabs:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)viewFrameDidChange:(id)fp8;
- (id)addTabWithTitle:(id)fp8 andIdentifier:(id)fp12;
- (BOOL)selectTabWithIdentifier:(id)fp8;
- (void)closeTabsWithIdentifiers:(id)fp8;
- (void)setIsModified:(BOOL)fp8 forTabWithIdentifier:(id)fp12;
- (void)setTitle:(id)fp8 forTabWithIdentifier:(id)fp12;
- (void)changeIdentiferTo:(id)fp8 forTabWithIdentifier:(id)fp12;
- (struct OakClickInfo)clickInfoForPoint:(struct _NSPoint)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (void)preventWindowOrdering:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)takeSelectedTabFrom:(id)fp8;
- (void)closeSelectedTab;
- (void)mouseDragged:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (unsigned int)dragOperationForInfo:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;

@end

@interface OakTab : NSObject
{
    NSString *title;
    id identifier;
    struct _NSRect frame;
    BOOL hidden;
    BOOL isWindowKey;
    BOOL isModified;
    int state;
    int closeButtonState;
}

+ (id)tabWithTitle:(id)fp8 andIdentifier:(id)fp12;
- (void)dealloc;
- (id)textAttributes;
- (void)drawRect:(struct _NSRect)fp8;
- (float)width;
- (struct _NSRect)closeButtonFrame;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (BOOL)closeButtonContainsPoint:(struct _NSPoint)fp8;
- (struct _NSRect)frame;
- (void)setFrame:(struct _NSRect)fp8;
- (BOOL)isWindowKey;
- (void)setIsWindowKey:(BOOL)fp8;
- (BOOL)isModified;
- (void)setIsModified:(BOOL)fp8;
- (BOOL)hidden;
- (void)setHidden:(BOOL)fp8;
- (id)title;
- (id)identifier;
- (void)setTitle:(id)fp8;
- (void)setIdentifier:(id)fp8;
- (int)buttonState;
- (void)setButtonState:(int)fp8;
- (int)closeButtonState;
- (void)setCloseButtonState:(int)fp8;

@end

@interface OakTextView : NSView <NSTextInput>
{
    NSMutableArray *bindingObservers;
    OakDocument *document;
    // Error parsing type: ^{view={iterator_observer="_vptr$observer"^^?"storage""mirrors"{list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>,std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"previous_mirrors"{list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>,std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"notifications"{list<text::iterator_observer::subset,std::allocator<text::iterator_observer::subset> >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"previous_notifications"{list<text::iterator_observer::subset,std::allocator<text::iterator_observer::subset> >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"mirror_undo_map"{map<text::undo_key,std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > > > >="_M_t"{_Rb_tree<text::undo_key,std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > >,std::_Select1st<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > > >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > > > >="_M_impl"{_Rb_tree_impl<std::less<text::undo_key>,false>="_M_key_compare"{less<text::undo_key>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"notify_undo_map"{map<text::undo_key,std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > > > >="_M_t"{_Rb_tree<text::undo_key,std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > >,std::_Select1st<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > > >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > > > >="_M_impl"{_Rb_tree_impl<std::less<text::undo_key>,false>="_M_key_compare"{less<text::undo_key>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"pending_erases"{vector<text::iterator_observer::pending_erase,std::allocator<text::iterator_observer::pending_erase> >="_M_impl"{_Vector_impl="_M_start"^{pending_erase}"_M_finish"^{pending_erase}"_M_end_of_storage"^{pending_erase}}}"pending_inserts"{vector<text::iterator_observer::pending_insert,std::allocator<text::iterator_observer::pending_insert> >="_M_impl"{_Vector_impl="_M_start"^{pending_insert}"_M_finish"^{pending_insert}"_M_end_of_storage"^{pending_insert}}}"did_insert_data"{vector<text::char_t,std::allocator<text::char_t> >="_M_impl"{_Vector_impl="_M_start"^S"_M_finish"^S"_M_end_of_storage"^S}}"max_memento"I"updating_mirror"B"performing_undo"B"track_memento"B}{iterator_observer="_vptr$observer"^^?"storage""mirrors"{list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>,std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"previous_mirrors"{list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>,std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"notifications"{list<text::iterator_observer::subset,std::allocator<text::iterator_observer::subset> >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"previous_notifications"{list<text::iterator_observer::subset,std::allocator<text::iterator_observer::subset> >="_M_impl"{_List_impl="_M_node"{_List_node_base="_M_next"^{_List_node_base}"_M_prev"^{_List_node_base}}}}"mirror_undo_map"{map<text::undo_key,std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > > > >="_M_t"{_Rb_tree<text::undo_key,std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > >,std::_Select1st<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > > >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<std::pair<text::iterator_observer::subset, text::iterator_observer::subset>, std::allocator<std::pair<text::iterator_observer::subset, text::iterator_observer::subset> > > > > >="_M_impl"{_Rb_tree_impl<std::less<text::undo_key>,false>="_M_key_compare"{less<text::undo_key>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"notify_undo_map"{map<text::undo_key,std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > > > >="_M_t"{_Rb_tree<text::undo_key,std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > >,std::_Select1st<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > > >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, std::list<text::iterator_observer::subset, std::allocator<text::iterator_observer::subset> > > > >="_M_impl"{_Rb_tree_impl<std::less<text::undo_key>,false>="_M_key_compare"{less<text::undo_key>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"pending_erases"{vector<text::iterator_observer::pending_erase,std::allocator<text::iterator_observer::pending_erase> >="_M_impl"{_Vector_impl="_M_start"^{pending_erase}"_M_finish"^{pending_erase}"_M_end_of_storage"^{pending_erase}}}"pending_inserts"{vector<text::iterator_observer::pending_insert,std::allocator<text::iterator_observer::pending_insert> >="_M_impl"{_Vector_impl="_M_start"^{pending_insert}"_M_finish"^{pending_insert}"_M_end_of_storage"^{pending_insert}}}"did_insert_data"{vector<text::char_t,std::allocator<text::char_t> >="_M_impl"{_Vector_impl="_M_start"^S"_M_finish"^S"_M_end_of_storage"^S}}"max_memento"I"updating_mirror"B"performing_undo"B"track_memento"B}{snippet_observer_t="_vptr$observer"^^?"view""storage""insert_position"{iterator="line"I"column"I"storage"^{storage}}"current_snippet"^{snippet_t}"pending_insert"{vector<text::snippet_observer_t::insert_t,std::allocator<text::snippet_observer_t::insert_t> >="_M_impl"{_Vector_impl="_M_start"^{insert_t}"_M_finish"^{insert_t}"_M_end_of_storage"^{insert_t}}}"pending_erase"{vector<text::snippet_observer_t::erase_t,std::allocator<text::snippet_observer_t::erase_t> >="_M_impl"{_Vector_impl="_M_start"^{erase_t}"_M_finish"^{erase_t}"_M_end_of_storage"^{erase_t}}}}{selection="first_mark"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"last_mark"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"current_mark"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"column_mode"B"data"{vector<text::char_t,std::allocator<text::char_t> >="_M_impl"{_Vector_impl="_M_start"^S"_M_finish"^S"_M_end_of_storage"^S}}}{selection="first_mark"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"last_mark"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"current_mark"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"column_mode"B"data"{vector<text::char_t,std::allocator<text::char_t> >="_M_impl"{_Vector_impl="_M_start"^S"_M_finish"^S"_M_end_of_storage"^S}}}IIIIIIIBBBBBBB{map<size_t,std::_List_iterator<text::iterator_observer::subset>,std::less<UniCharCount>,std::allocator<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset> > > >="_M_t"{_Rb_tree<size_t,std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset> >,std::_Select1st<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset> > >,std::less<UniCharCount>,std::allocator<std::pair<const size_t, std::_List_iterator<text::iterator_observer::subset> > > >="_M_impl"{_Rb_tree_impl<std::less<UniCharCount>,false>="_M_key_compare"{less<UniCharCount>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}iBB{storage_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"view""observer_id"{_List_iterator<text::storage::observer*>="_M_node"^{_List_node_base}}}{tokenize_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"all_rules"^{__CFArray}"start_rule"I"lines"{vector<std::map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage> > >,std::allocator<std::map<uint32_t, bit_stack::storage, std::less<uint32_t>, std::allocator<std::pair<const uint32_t, bit_stack::storage> > > > >="_M_impl"{_Vector_impl="_M_start"^{map<uint32_t,bit_stack::storage,std::less<uint32_t>,std::allocator<std::pair<const uint32_t, bit_stack::storage> > >}"_M_finish"^{map<uint32_t,bit_stack::storage,std::less<uint32_t>,std::allocator<std::pair<const uint32_t, bit_stack::storage> > >}"_M_end_of_storage"^{map<uint32_t,bit_stack::storage,std::less<uint32_t>,std::allocator<std::pair<const uint32_t, bit_stack::storage> > >}}}"back_references"{map<size_t,std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper> > >,std::less<UniCharCount>,std::allocator<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper> > > > > >="_M_t"{_Rb_tree<size_t,std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper> > > >,std::_Select1st<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper> > > > >,std::less<UniCharCount>,std::allocator<std::pair<const size_t, std::stack<nfa_wrapper, std::deque<nfa_wrapper, std::allocator<nfa_wrapper> > > > > >="_M_impl"{_Rb_tree_impl<std::less<UniCharCount>,false>="_M_key_compare"{less<UniCharCount>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"thread"^{_opaque_pthread_t}"main_wait"{_opaque_pthread_cond_t="__sig"l"__opaque"[24C]}"worker_wait"{_opaque_pthread_cond_t="__sig"l"__opaque"[24C]}"first_dirty_line"I"last_dirty_line"I"requested_line"I"redraw_first"I"redraw_last"I"needs_to_redraw"B"worker_should"i"main_is"i"view""storage""textView"^v}{bookmark_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"view""nodes"{map<size_t,size_t,std::less<UniCharCount>,std::allocator<std::pair<const size_t, size_t> > >="_M_t"{_Rb_tree<size_t,std::pair<const size_t, size_t>,std::_Select1st<std::pair<const size_t, size_t> >,std::less<UniCharCount>,std::allocator<std::pair<const size_t, size_t> > >="_M_impl"{_Rb_tree_impl<std::less<UniCharCount>,false>="_M_key_compare"{less<UniCharCount>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}}{spellcheck_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"view""nodes"{vector<text::view::spellcheck_filter::node_t,std::allocator<text::view::spellcheck_filter::node_t> >="_M_impl"{_Vector_impl="_M_start"^{node_t}"_M_finish"^{node_t}"_M_end_of_storage"^{node_t}}}}{folding_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"storage""view""begin_pattern"^{ptrn_t}"end_pattern"^{ptrn_t}"markers"{set<text::view::folding_filter::marker_t,std::less<text::view::folding_filter::marker_t>,std::allocator<text::view::folding_filter::marker_t> >="_M_t"{_Rb_tree<text::view::folding_filter::marker_t,text::view::folding_filter::marker_t,std::_Identity<text::view::folding_filter::marker_t>,std::less<text::view::folding_filter::marker_t>,std::allocator<text::view::folding_filter::marker_t> >="_M_impl"{_Rb_tree_impl<std::less<text::view::folding_filter::marker_t>,false>="_M_key_compare"{less<text::view::folding_filter::marker_t>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"foldings"{set<text::view::folding_filter::folding_t,std::less<text::view::folding_filter::folding_t>,std::allocator<text::view::folding_filter::folding_t> >="_M_t"{_Rb_tree<text::view::folding_filter::folding_t,text::view::folding_filter::folding_t,std::_Identity<text::view::folding_filter::folding_t>,std::less<text::view::folding_filter::folding_t>,std::allocator<text::view::folding_filter::folding_t> >="_M_impl"{_Rb_tree_impl<std::less<text::view::folding_filter::folding_t>,false>="_M_key_compare"{less<text::view::folding_filter::folding_t>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}"needs_to_parse"B"last_valid_line"I}{soft_wrap_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"view""erase_first"{pos="line"I"column"I}"erase_last"{pos="line"I"column"I}"ranges"{vector<text::view::soft_wrap_filter::line_range,std::allocator<text::view::soft_wrap_filter::line_range> >="_M_impl"{_Vector_impl="_M_start"^{line_range}"_M_finish"^{line_range}"_M_end_of_storage"^{line_range}}}}{view_filter="_vptr$observer"^^?"toward_storage"^{filter}"toward_view"^{filter}"view""undo_map"{map<text::undo_key,text::selection,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, text::selection> > >="_M_t"{_Rb_tree<text::undo_key,std::pair<const text::undo_key, text::selection>,std::_Select1st<std::pair<const text::undo_key, text::selection> >,std::less<text::undo_key>,std::allocator<std::pair<const text::undo_key, text::selection> > >="_M_impl"{_Rb_tree_impl<std::less<text::undo_key>,false>="_M_key_compare"{less<text::undo_key>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}}{map<text::view::filter_index,text::filter*,std::less<text::view::filter_index>,std::allocator<std::pair<const text::view::filter_index, text::filter*> > >="_M_t"{_Rb_tree<text::view::filter_index,std::pair<const text::view::filter_index, text::filter*>,std::_Select1st<std::pair<const text::view::filter_index, text::filter*> >,std::less<text::view::filter_index>,std::allocator<std::pair<const text::view::filter_index, text::filter*> > >="_M_impl"{_Rb_tree_impl<std::less<text::view::filter_index>,false>="_M_key_compare"{less<text::view::filter_index>=}"_M_header"{_Rb_tree_node_base="_M_color"i"_M_parent"^{_Rb_tree_node_base}"_M_left"^{_Rb_tree_node_base}"_M_right"^{_Rb_tree_node_base}}"_M_node_count"I}}}{completion_helper="memento"I"offset"I"index"I"it"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"cur"{view_iterator="view"^{view}"base"{iterator="line"I"column"I"storage"^{storage}}"offset"I"desired_column"I}"words"{vector<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >="_M_impl"{_Vector_impl="_M_start"^{basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >}"_M_finish"^{basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >}"_M_end_of_storage"^{basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >}}}}}, name: view
    struct map<bit_stack::storage, objc_ptr<objc_object*>, std::less<bit_stack::storage>, std::allocator<std::pair<const bit_stack::storage, objc_ptr<objc_object*>>>> *styleCache;
    struct action_map *actions;
    struct title_action_map *title_actions;
    struct ATSUI_render *render;
    NSMutableArray *macroRecordingBuffer;
    unsigned int viewChangeNesting;
    BOOL fillBackground;
    BOOL hasMarkedTextBeingEdited;
    BOOL didPressAlternateKey;
    NSDate *didPressAlternateKeyAtTime;
    unsigned int lastModifierFlags;
    BOOL leftMouseDown;
    BOOL isActivatingClick;
    BOOL isShowingDragCursor;
    NSTimer *initiateDragTimer;
    NSTimer *dragScrollTimer;
    NSEvent *activationEvent;
    struct _NSPoint mouseDownPoint;
    BOOL hasDragInside;
    BOOL dragIsLocal;
    NSTimer *blinkCaretTimer;
    BOOL isCaretHidden;
    struct _NSRect textFrame;
    float lineNumbersOffset;
    float bookmarksOffset;
    float foldingsOffset;
    NSTimer *showFoldedTextTimer;
    struct _NSRect showFoldedTextTriggerRectangle;
    OakTooltipWindow *showFoldedTextWindow;
    unsigned int showFoldedTextFromLine;
    unsigned int showFoldedTextToLine;
    OakWebPreviewManager *webPreviewManager;
    struct observer *webPreviewChangeObserver;
    BOOL pendingUpdateFunctionPopUp;
    NSTimer *updateFunctionPopUpTimer;
    NSArray *functionPopUp;
    id currentSymbol;
    struct observer *functionPopupChangeObserver;
    unsigned int clickCount;
    unsigned int mouseDownAtPositionLine;
    unsigned int mouseDownAtPositionColumn;
    unsigned int lineNumberDigits;
    OakISearchWindow *iSearchWindow;
    NSFont *font;
    _Bool hasCustomFont;
    unsigned int rightMargin;
    unsigned int tabSize;
    _Bool openFilesFolded;
    _Bool freehandedMode;
    _Bool overwriteMode;
    _Bool softWrap;
    _Bool hardWrap;
    _Bool autoIndent;
    _Bool indentedPaste;
    _Bool continuousSpellChecking;
    _Bool treatsSpacesAsTabs;
    _Bool smartTyping;
    _Bool foldings;
    _Bool lineNumbers;
    _Bool showSoftWrapInGutter;
    _Bool showBookmarksInGutter;
    _Bool expandSnippetsOnTab;
    _Bool antiAliasEnabled;
    _Bool showInvisibles;
    NSString *currentMode;
    id currentStyleSheet;
    id languageUUID;
    _Bool highlightWrapMargin;
    _Bool highlightCurrentLine;
    _Bool showWrapMargin;
}

+ (void)initialize;
- (void)undo:(id)fp8;
- (void)redo:(id)fp8;
- (void)toggleMacroRecording:(id)fp8;
- (void)recordMacroCommand:(SEL)fp8 argument:(id)fp12;
- (void)playMacroWithOptions:(id)fp8;
- (void)abortMacroRecording:(id)fp8;
- (id)toggleMacroRecordingMenuTitle;
- (BOOL)canAbortMacroRecording;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)applicationDidBecomeActiveNotification:(id)fp8;
- (void)userDefaultsDidChange:(id)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (struct _NSRect)caretRefreshRectangle;
- (void)setSelectionNeedsDisplay:(BOOL)fp8;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (BOOL)canBecomeKeyView;
- (BOOL)acceptsFirstResponder;
- (BOOL)resignFirstResponder;
- (id)document;
- (BOOL)becomeFirstResponder;
- (void)windowDidChangeKeyStatus:(id)fp8;
- (void)snapshotMetaData;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)setDocument:(id)fp8;
- (void)myScrollRectToVisible:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (BOOL)tryToPerform:(SEL)fp8 with:(id)fp12;
- (BOOL)respondsToSelector:(SEL)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)hasMarkedText;
- (struct _NSRange)markedRange;
- (struct _NSRange)selectedRange;
- (id)validAttributesForMarkedText;
- (struct _NSRect)firstRectForCharacterRange:(struct _NSRange)fp8;
- (long)conversationIdentifier;
- (unsigned int)characterIndexForPoint:(struct _NSPoint)fp8;
- (id)attributedSubstringFromRange:(struct _NSRange)fp8;
- (void)doCommandBySelector:(SEL)fp8;
- (void)setMarkedText:(id)fp8 selectedRange:(struct _NSRange)fp12;
- (void)unmarkText;
- (void)insertText:(id)fp8;
- (void)pasteFromHistory:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (void)deleteForward:(id)fp8;
- (void)deleteToEndOfParagraph:(id)fp8;
- (void)flagsChanged:(id)fp8;
- (void)centerSelectionInVisibleArea:(id)fp8;
- (void)setFont:(id)fp8;
- (void)makeTextLarger:(id)fp8;
- (void)makeTextSmaller:(id)fp8;
- (BOOL)canMakeFontBigger;
- (BOOL)canMakeFontSmaller;
- (BOOL)hasSelection;
- (unsigned long)internalReplaceAll:(id)fp8 error:(id *)fp12;
- (void)replaceAll:(id)fp8;
- (void)replaceAllInSelection:(id)fp8;
- (id)findWithOptions:(id)fp8;
- (id)validRequestorForSendType:(id)fp8 returnType:(id)fp12;
- (BOOL)writeSelectionToPasteboard:(id)fp8 types:(id)fp12;
- (BOOL)readSelectionFromPasteboard:(id)fp8;
- (void)setupBlinkCaretTimer;
- (void)blinkCaret:(id)fp8;
- (void)showCaret;
- (void)centerCaretInDisplay:(id)fp8;
- (struct pos)eventPosition:(id)fp8;
- (void)changeToDragPointer:(id)fp8;
- (void)resetCursorRects;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (int)dragDelay;
- (void)rightMouseDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)startDragForEvent:(id)fp8;
- (void)autoscrollTimerFired:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)scrollViewByX:(float)fp8 byY:(long)fp12;
- (void)scrollLineUp:(id)fp8;
- (void)scrollLineDown:(id)fp8;
- (void)scrollColumnLeft:(id)fp8;
- (void)scrollColumnRight:(id)fp8;
- (void)setHasDragInside:(BOOL)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (unsigned int)dragOperationForInfo:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)changeSpelling:(id)fp8;
- (void)movePageUp:(id)fp8;
- (void)movePageDown:(id)fp8;
- (void)movePageUpAndModifySelection:(id)fp8;
- (void)movePageDownAndModifySelection:(id)fp8;
- (BOOL)canReopenWithEncoding;
- (BOOL)reopenWithEncodingIsChecked:(id)fp8;
- (void)reopenWithEncoding:(id)fp8;
- (void)fillSelectionWithString:(id)fp8;
- (void)performFillSelectionWithAction:(id)fp8;
- (void)fillSelectionWith:(id)fp8;
- (void)recalcFrameSize;
- (void)setFrame:(struct _NSRect)fp8;
- (void)updateScreenWidth;
- (void)scrollPageUp:(id)fp8;
- (void)scrollPageDown:(id)fp8;
- (void)scrollToBeginningOfDocument:(id)fp8;
- (void)scrollToEndOfDocument:(id)fp8;
- (id)stringValue;
- (id)currentMode;
- (void)setCurrentMode:(id)fp8;
- (id)_getOakTextViewInstance:(id)fp8;

@end

@interface OakTextView (bindings)
- (void)bind:(id)fp8 toObject:(id)fp12 withKeyPath:(id)fp16 options:(id)fp20;
- (void)unbind:(id)fp8;
- (void)updateValue:(id)fp8 forKey:(id)fp12;
- (void)setMacroRecordingBuffer:(id)fp8;
@end

@interface OakTextView (Bookmarks)
- (void)toggleCurrentBookmark:(id)fp8;
- (id)toggleCurrentBookmarkMenuTitle;
- (void)goToNextBookmark:(id)fp8;
- (void)goToPreviousBookmark:(id)fp8;
@end

@interface OakTextView (drawRect)
- (struct _NSPoint)iteratorPosition:;
- (void)toggleShowInvisibles:(id)fp8;
- (id)toggleShowInvisiblesMenuTitle;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setupTextFrame;
- (unsigned int)typeForLine:(id)fp8 withPatterns:(id [4])fp12;
- (int)currentIndentForContent:(id)fp8 atLine:(unsigned long)fp12;
- (int)indentForCurrentLine;
- (unsigned long)currentIndent;
- (unsigned long)indentLine:(unsigned long)fp8;
- (id)indentMenuTitle;
- (void)indent:(id)fp8;
@end

@interface OakTextView (ExecuteSelection)
- (void)executeSelectionInsertingOutput:(id)fp8;
- (void)executeSelectionAppendingOutput:(id)fp8;
- (void)executeSelectionReplacingSelection:(id)fp8;
@end

@interface OakTextView (Extension)
+ (void)load;
+ (void)populateWrapColumnMenu:(id)fp8;
- (void)selectFollowingKeyView:(id)fp8;
- (void)selectPrecedingKeyView:(id)fp8;
- (BOOL)takeRightMarginFromIsChecked:(id)fp8;
- (void)setContinuousSpellCheckingEnabled:(BOOL)fp8;
- (void)setExpandSnippetsOnTab:(BOOL)fp8;
- (void)setSoftWrap:(BOOL)fp8;
- (void)setFreehandedEdit:(BOOL)fp8;
- (void)setTabSize:(unsigned long)fp8;
- (void)setRightMargin:(unsigned long)fp8;
- (void)setOverwriteMode:(BOOL)fp8;
- (void)setOpenFilesFolded:(BOOL)fp8;
- (void)setShowSoftWrapInGutter:(BOOL)fp8;
- (void)setShowBookmarksInGutter:(BOOL)fp8;
- (unsigned long)tabSize;
- (BOOL)freehandedEdit;
- (void)toggleFreehandedEdit:(id)fp8;
- (BOOL)isContinuousSpellCheckingEnabled;
- (void)toggleContinuousSpellChecking:(id)fp8;
- (BOOL)toggleContinuousSpellCheckingIsChecked:(id)fp8;
- (BOOL)expandSnippetsOnTab;
- (void)toggleExpandSnippetsOnTab:(id)fp8;
- (BOOL)toggleExpandSnippetsOnTabIsChecked:(id)fp8;
- (BOOL)canToggleHardWrap;
- (BOOL)overwriteMode;
- (void)toggleOverwriteMode:(id)fp8;
- (BOOL)softWrap;
- (void)toggleSoftWrap:(id)fp8;
- (BOOL)autoIndent;
- (BOOL)hardWrap;
- (BOOL)indentedPaste;
- (void)setAutoIndent:(BOOL)fp8;
- (void)setHardWrap:(BOOL)fp8;
- (void)setIndentedPaste:(BOOL)fp8;
- (void)toggleAutoIndent:(id)fp8;
- (void)toggleHardWrap:(id)fp8;
- (void)toggleIndentedPaste:(id)fp8;
- (BOOL)openFilesFolded;
- (void)toggleOpenFilesFolded:(id)fp8;
- (BOOL)toggleOpenFilesFoldedIsChecked:(id)fp8;
- (BOOL)canToggleOpenFilesFolded;
- (BOOL)showSoftWrapInGutter;
- (void)toggleShowSoftWrapInGutter:(id)fp8;
- (BOOL)toggleShowSoftWrapInGutterIsChecked:(id)fp8;
- (BOOL)showBookmarksInGutter;
- (void)toggleShowBookmarksInGutter:(id)fp8;
- (BOOL)toggleShowBookmarksInGutterIsChecked:(id)fp8;
- (void)takeTabSizeFrom:(id)fp8;
- (BOOL)takeTabSizeFromIsChecked:(id)fp8;
- (void)takeRightMarginFrom:(id)fp8;
- (void)insertNewline:(id)fp8;
- (void)setSoftTabs:(BOOL)fp8;
- (BOOL)softTabs;
- (BOOL)treatsSpacesAsTabs;
- (void)setSmartTyping:(BOOL)fp8;
- (BOOL)smartTyping;
- (void)toggleSmartTyping:(id)fp8;
- (void)setAntiAliasEnabled:(BOOL)fp8;
- (BOOL)antiAliasEnabled;
- (void)toggleAntiAliasEnabled:(id)fp8;
- (void)setLineNumbers:(BOOL)fp8;
- (BOOL)lineNumbers;
- (void)toggleLineNumbers:(id)fp8;
- (void)insertTab:(id)fp8;
- (void)goToLineNumber:(id)fp8;
- (void)goToColumnNumber:(id)fp8;
- (void)selectToLine:(id)fp8 andColumn:(id)fp12;
- (void)setFoldingsEnabled:(BOOL)fp8;
- (BOOL)foldingsEnabled;
- (void)toggleFoldingsEnabled:(id)fp8;
- (id)toggleFoldingMenuTitle;
- (BOOL)canToggleFolding;
- (BOOL)canFoldAllAtLevel;
- (BOOL)canUnfoldAllAtLevel;
- (void)foldAllAtLevel:(id)fp8;
- (void)foldSelection:(id)fp8;
- (void)toggleFolding:(id)fp8;
- (BOOL)toggleFreehandedEditIsChecked:(id)fp8;
- (BOOL)toggleOverwriteModeIsChecked:(id)fp8;
- (BOOL)toggleSoftWrapIsChecked:(id)fp8;
- (BOOL)toggleTreatsSpacesAsTabsIsChecked:(id)fp8;
- (BOOL)toggleSmartTypingIsChecked:(id)fp8;
- (BOOL)toggleFoldingsEnabledIsChecked:(id)fp8;
- (BOOL)toggleHardWrapIsChecked:(id)fp8;
- (BOOL)toggleIndentedPasteIsChecked:(id)fp8;
- (BOOL)toggleLineNumbersIsChecked:(id)fp8;
- (BOOL)toggleAntiAliasEnabledIsChecked:(id)fp8;
- (void)selectBlock:(id)fp8;
- (BOOL)canNextCompletion;
- (BOOL)canPreviousCompletion;
@end

@interface OakTextView (ScopedSettings)
- (void)setScopedValue:(id)fp8 forKey:(id)fp12 inDomain:(id)fp16;
- (id)scopedValueForKey:(id)fp8 inDomain:(id)fp12;
@end

@interface OakTextView (FoldingTooltip)
- (void)viewDidMoveToWindow;
- (void)showFoldedText:(id)fp8;
- (BOOL)abortShowingFoldedText:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)orderFrontWebPreview:(id)fp8;
@end

@interface OakISearchWindow : NSPanel
{
    OakTextView *textView;
    NSTextField *textField;
    BOOL reverseSearch;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32 screen:(id)fp36;
- (void)dealloc;
- (void)setTextView:(id)fp8;
- (BOOL)canBecomeKeyWindow;
- (void)cleanupAndClose:(id)fp8;
- (void)sendEvent:(id)fp8;
- (id)incrementalSearchString;
- (void)setIncrementalSearchString:(id)fp8;

@end

@interface OakTextView (ISearch)
- (id)incrementalSearchWindow;
- (void)ISIM_incrementalSearch:(id)fp8;
- (void)ISIM_reverseIncrementalSearch:(id)fp8;
- (BOOL)findNextIncrementalSearchString:(BOOL)fp8;
- (BOOL)findPreviousIncrementalSearchString:(BOOL)fp8;
@end

@interface OakTextView (OakTextViewPageUpDown)
- (void)pageUp:(id)fp8;
- (void)pageDown:(id)fp8;
- (void)pageUpAndModifySelection:(id)fp8;
- (void)pageDownAndModifySelection:(id)fp8;
@end

@interface OakTextViewPrinting : NSView
{
    OakTextView *textView;
    NSMatrix *paperOrnaments;
    unsigned int linesPerPage;
    unsigned int numberOfPages;
    struct vector<std::vector<text::char_t, std::allocator<text::char_t>>, std::allocator<std::vector<text::char_t, std::allocator<text::char_t>>>> *lines;
    struct ATSUI_render *render;
}

- (id)initWithTextView:(id)fp8;
- (void)dealloc;
- (id)printJobTitle;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (void)beginPageInRect:(struct _NSRect)fp8 atPlacement:(struct _NSPoint)fp24;
- (void)drawPageBorderWithSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (struct _NSRect)rectForPage:(int)fp8;
- (float)calculatePrintWidth;
- (float)calculatePrintHeight;

@end

@interface OakTextView (OakTextViewPrinting)
- (void)printOperationDidRun:(id)fp8 success:(BOOL)fp12 contextInfo:(id)fp16;
- (void)printDocument:(id)fp8;
@end

@interface OakTextView (SpellChecking)
- (void)ignoreSpelling:(id)fp8;
- (void)contextMenuIgnoreSpelling:(id)fp8;
- (void)contextMenuLearnSpelling:(id)fp8;
- (void)checkSpelling:(id)fp8;
- (void)showGuessPanel:(id)fp8;
- (void)correctWord:(id)fp8;
- (void)selectMisspelledWordAt:;
- (id)contextMenu;
- (id)menuForEvent:(id)fp8;
- (void)showContextMenu:(id)fp8;
@end

@interface OakSymbolChooser : OakTableViewController
{
    NSSearchField *filterStringTextField;
    NSArrayController *arrayController;
    NSArray *displaySymbols;
    NSArray *symbols;
}

+ (id)sharedInstance;
- (id)init;
- (void)functionPopUpDidChange:(id)fp8;
- (void)currentFunctionDidChange:(id)fp8;
- (void)search:(id)fp8;
- (void)accept:(id)fp8;
- (void)cancel:(id)fp8;
- (void)windowDidLoad;
- (void)selectFromList:(id)fp8 withSelection:(id)fp12;

@end

@interface OakTextView (StyleSheet)
+ (void)load;
- (void)goToSymbol:(id)fp8;
- (id)currentStyleSheet;
- (void)themeDidChange:(id)fp8;
- (void)setCurrentStyleSheet:(id)fp8;
- (id)scopeForContext:;
- (id)stylesForContext:;
-     // Error parsing type: 12@0:48, name: graphPathForIterator:
-     // Error parsing type: 12@0:4c8, name: graphPathForCaretWait:
- (id)currentContext;
- (id)currentContext:(id)fp8;
- (id)stylesForCaretWait:(BOOL)fp8;
- (id)stylesForCaret;
- (void)resetDisplay:(id)fp8;
- (id)languageForUUID:(id)fp8;
- (id)languageChoiceForFile:(id)fp8 withFirstLine:(id)fp12;
- (id)languageChoiceForCurrentFile;
- (id)suggestedExtensionForDocument;
- (BOOL)storedSoftWrapSetting;
- (int)storedTabSizeSetting;
- (BOOL)storedSoftTabsSetting;
- (BOOL)storedContinuousSpellCheckingSetting;
- (void)initializeSettings;
- (void)learnFileAssociation:(id)fp8;
- (void)changeLanguageTo:(id)fp8 andLearn:(BOOL)fp12;
- (void)changeLanguageToAndLearn:(id)fp8;
- (void)languagesDidChange:(id)fp8;
- (void)preferencesDidChange:(id)fp8;
- (void)setCurrentSymbol:(id)fp8;
- (void)buildFunctionPopUp;
- (id)functionPopUp;
- (void)delayedUpdateFunctionPopUp:(id)fp8;
- (void)updateFunctionPopUp:(BOOL)fp8;
@end

@interface NSArray (OakArray2)
- (id)arrayByRemovingObject:(id)fp8;
@end

@interface OakThemeManager : NSObject
{
    NSMutableArray *settingsFiles;
}

+ (id)sharedInstance;
+ (void)initialize;
- (id)init;
- (id)allThemes;
- (id)currentTheme:(id)fp8;

@end

@interface OakTipOfTheDay : NSObject
{
    NSWindow *window;
    NSArray *allTips;
    NSString *tipOfTheDay;
    BOOL hasPreviousTip;
    BOOL hasNextTip;
}

+ (id)sharedInstance;
+ (void)initialize;
- (id)init;
- (void)applicationDidFinishLaunching:(id)fp8;
- (void)setup;
- (void)orderFrontTipOfTheDay:(id)fp8;
- (void)showPreviousTip:(id)fp8;
- (void)showNextTip:(id)fp8;

@end

@interface OakTooltipWindow : NSWindow
{
    NSTextField *field;
    NSTimer *animationTimer;
    NSDate *animationStart;
    NSDate *didOpenAtDate;
    struct _NSPoint mousePositionWhenOpened;
    BOOL enforceMouseThreshold;
}

+ (void)initialize;
- (id)initWithScreen:(id)fp8;
- (void)stopAnimation:(id)fp8;
- (void)dealloc;
- (void)setFont:(id)fp8;
- (void)setStringValue:(id)fp8;
- (void)showAtLocation:(struct _NSPoint)fp8 forScreen:(id)fp16;
- (void)setEnforceMouseThreshold:(BOOL)fp8;
- (BOOL)shouldCloseForMousePosition:(struct _NSPoint)fp8;
- (void)animationTick:(id)fp8;
- (void)orderOut:(id)fp8;

@end

@interface OakWebPreviewManager : NSResponder
{
    NSWindow *webPreviewWindow;
    WebView *webView;
    NSTimer *automaticRefreshTimer;
    BOOL filterText;
    BOOL automaticRefresh;
    NSString *filterTextCommand;
    float automaticRefreshDelay;
    NSString *baseURL;
    id delegate;
    BOOL pendingRefresh;
    struct _NSRect pendingVisibleRect;
    NSNib *webPreviewNib;
    NSArray *topLevelNibObjects;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)orderFrontWebPreview:(id)fp8;
- (void)progressFinishedNotification:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setBaseURL:(id)fp8;
- (void)performRefresh:(id)fp8;
- (void)actualRefresh:(id)fp8;
- (void)goBack:(id)fp8;
- (void)goForward:(id)fp8;
- (void)reload:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)scrollWebView:(id)fp8;
- (void)setAutomaticRefresh:(BOOL)fp8;
- (void)setFilterText:(BOOL)fp8;
- (void)setFilterTextCommand:(id)fp8;
- (void)resetRefreshTimer;
- (void)printDocument:(id)fp8;

@end

@interface OakWindow : NSWindow
{
}

- (BOOL)respondsToSelector:(SEL)fp8;

@end

@interface OakWordCharacters : NSObject
{
    NSString *wordCharacters;
    struct set<unichar, std::less<unichar>, std::allocator<unichar>> *set;
}

+ (id)sharedInstance;
+ (void)initialize;
- (BOOL)isWordCharacter:(unsigned short)fp8;
- (void)setup;
- (id)init;
- (void)userDefaultsDidChange:(id)fp8;

@end

@interface OakInternalProtocol : NSURLProtocol
{
    NSFileHandle *fileHandle;
    NSString *key;
}

+ (void)load;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (void)cleanup;
- (void)dealloc;
- (void)dataAvailable:(id)fp8;
- (void)startLoading;
- (void)stopLoading;

@end

@interface OakBorderlessPanel : NSPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)sendEvent:(id)fp8;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface OakCompletionManager : NSObject <OakKeyObserver>
{
    NSPanel *window;
    NSTableView *tableView;
    NSArray *methods;
}

+ (id)sharedInstance;
- (id)init;
- (BOOL)shouldSwallowEvent:(id)fp8;
- (void)textDidChangeFor:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface OakTextView (DictionaryInput)
- (id)accessibilityHitTest:(struct _NSPoint)fp8;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)fp8;
- (id)accessibilityAttributeValue:(id)fp8 forParameter:(id)fp12;
@end

@interface OakSelfUpdate : NSWindowController
{
    NSTextField *statusText;
    NSProgressIndicator *progressBar;
    NSButton *cancelButton;
    NSButton *restartButton;
    NSURLDownload *urlDownload;
    BOOL inactive;
    BOOL isDownloadAuthenticated;
    NSString *archivePath;
    NSData *archiveSignature;
    unsigned int current;
    unsigned int total;
}

+ (void)restart;
- (void)dealloc;
- (void)setInfoText:(const char *)fp8;
- (void)showError:(id)fp8;
- (void)downloadDidBegin:(id)fp8;
- (void)download:(id)fp8 didReceiveResponse:(id)fp12;
- (void)download:(id)fp8 decideDestinationWithSuggestedFilename:(id)fp12;
- (void)download:(id)fp8 didReceiveDataOfLength:(unsigned int)fp12;
- (void)downloadDidFinish:(id)fp8;
- (void)download:(id)fp8 didFailWithError:(id)fp12;
- (void)showInstallAndRestartButton;
- (void)installAndRestart:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface OakCreateSymbolicLinkWizard : NSObject
{
    NSWindow *createSymbolicLinkWindow;
    NSPopUpButton *destinationPopUp;
    NSMutableArray *destinationPaths;
    unsigned int selectedDestination;
}

+ (id)sharedInstance;
- (BOOL)setupDestinationPaths;
- (id)init;
- (id)toolPath;
- (BOOL)alreadyHasLink;
- (BOOL)canCreateLink;
- (void)askUserAboutSymbolicLink;
- (void)showHelp:(id)fp8;
- (void)cancel:(id)fp8;
- (void)accept:(id)fp8;
- (void)destinationChanged:(id)fp8;
- (void)openPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;

@end

@interface TMPlugInController : NSObject
{
    NSMutableArray *loadedPlugIns;
    NSMutableSet *plugInBundleIdentifiers;
    BOOL didLoadAllPlugIns;
}

+ (id)sharedInstance;
- (id)init;
- (float)version;
- (void)loadPlugIn:(id)fp8;
- (id)installPath;
- (void)installPlugIn:(id)fp8;
- (void)loadAllPlugIns:(id)fp8;

@end

@interface TMPlugIn : NSObject
{
    NSBundle *plugInBundle;
    id instance;
}

+ (id)plugInWithPath:(id)fp8;
- (id)initWithPath:(id)fp8;
- (void)dealloc;
- (id)name;
- (id)bundleIdentifier;
- (id)instance;

@end

@interface OakSelectBundleItem : OakTableViewController
{
    NSSearchField *filterStringTextField;
    NSTableColumn *bundleItemsTableColumn;
    NSMenu *filterCriteriaMenu;
    NSString *filterString;
    NSString *scope;
    NSArray *bundleItems;
    BOOL isSearchingKeyEquivalents;
}

- (void)windowDidLoad;
- (void)setSearchCriterion:(id)fp8;
- (id)shouldInterceptKeyEquvalent:(id)fp8;
- (void)showKeyEquivalent:(id)fp8 withResults:(id)fp12;
- (BOOL)validateMenuItem:(id)fp8;
- (void)refresh;
- (void)search:(id)fp8;
- (void)setScope:(id)fp8;
- (void)accept:(id)fp8;
- (void)cancel:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface BundleManager : NSObject <OakKeyObserver>
{
    NSMutableDictionary *bundles;
    NSMutableDictionary *bundleItems;
    NSMutableArray *languages;
    BOOL isModified;
    NSMutableArray *bundleItemsStack;
    NSMutableDictionary *bundleItemsOfKind;
    OakSelectBundleItem *selectBundleItemController;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)setModified:(BOOL)fp8;
- (void)saveChanges:(id)fp8;
- (id)bundleNamesAtPath:(id)fp8;
- (void)loadBundles;
- (id)bundlesOnDiskExcluding:(id)fp8;
- (id)allBundlesOnDisk;
- (void)reloadBundles;
- (void)addBundle:(id)fp8;
- (void)addBundleItem:(id)fp8;
- (void)removeBundle:(id)fp8;
- (void)removeBundleItem:(id)fp8;
- (id)bundleForUUID:(id)fp8;
- (id)bundleItemForUUID:(id)fp8;
- (id)bundles;
- (id)bundleItems;
- (id)languages;
- (id)bundleItemsOfKind:(id)fp8;
- (id)bundleItemsOfKinds:(id)fp8;
- (id)bundlesWithItemsOfKind:(id)fp8;
- (id)bundlesWithItemsOfKinds:(id)fp8;
- (id)filterItems:(id)fp8 usingString:(id)fp12;
- (id)filterItems:(id)fp8 inScope:(id)fp12;
- (id)sortItems:(id)fp8 accordingToScope:(id)fp12;
- (id)bundleItemsForKeyString:(id)fp8;
- (id)bundleItemsForKeyString:(id)fp8 inScope:(id)fp12;
- (id)bundleItemsForTabTrigger:(id)fp8 inScope:(id)fp12;
- (id)bundleItemsForMouseGesture:(id)fp8 inScope:(id)fp12;
- (id)bundleItemsForFileDrop:(id)fp8 inScope:(id)fp12;
- (id)defaultBundle;
- (void)setDefaultBundle:(id)fp8;
- (BOOL)canExecuteItem:(id)fp8;
- (id)currentBundleItem;
- (void)pushBundleItem:(id)fp8;
- (void)popBundleItem;
- (void)executeItem:(id)fp8;
- (id)showMenuForBundleItems:(id)fp8 usingTextView:(id)fp12;
- (id)showMenuForBundleItems:(id)fp8 usingTextView:(id)fp12 atLocation:(struct _NSPoint)fp16;
- (BOOL)shouldSwallowEvent:(id)fp8;
- (void)selectBundleItemFromList:(id)fp8;
- (BOOL)installBundle:(id)fp8;
- (BOOL)installBundleItem:(id)fp8 ofKind:(id)fp12;
- (BOOL)canHandleFile:(id)fp8;

@end

@interface TemplateFile : NSObject
{
    NSString *name;
    NSString *path;
    NSString *bundleItemUUID;
    BOOL isModified;
    NSString *content;
}

+ (id)templateFileWithBundleItemUUID:(id)fp8;
+ (id)templateFileWithPath:(id)fp8 andBundleItemUUID:(id)fp12;
- (id)initWithBundleItemUUID:(id)fp8;
- (id)initWithPath:(id)fp8 andBundleItemUUID:(id)fp12;
- (void)dealloc;
- (int)caseInsensitiveCompare:(id)fp8;
- (id)createDuplicate;
- (BOOL)isModified;
- (id)name;
- (id)kind;
- (id)bundleItemUUID;
- (id)bundleItem;
- (id)content;
- (void)setModified:(BOOL)fp8;
- (void)setName:(id)fp8;
- (void)setContent:(id)fp8;
- (id)writeToDirectory:(id)fp8;
- (void)removeTemplateFile;

@end

@interface BundleItem : BaseItem
{
    NSString *scopeSelector;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> *scopeSelectorCString;
    NSString *keyEquivalent;
    NSString *tabTrigger;
    NSString *mouseGesture;
    NSArray *draggedFileExtensions;
    NSString *bundleUUID;
    NSMutableArray *sourcePaths;
    NSString *pristineCopyPlistPath;
    NSMutableDictionary *content;
    NSMutableArray *templateFiles;
}

+ (id)bundleItemWithContent:(id)fp8 andKind:(id)fp12;
+ (id)bundleWithContent:(id)fp8 kind:(id)fp12 bundleUUID:(id)fp16 sourcePaths:(id)fp20;
- (id)initWithContent:(id)fp8 andKind:(id)fp12;
- (id)initWithContent:(id)fp8 kind:(id)fp12 bundleUUID:(id)fp16 sourcePaths:(id)fp20;
- (void)dealloc;
- (void)prepareForSaving;
- (id)createDuplicate;
- (id)writeToDirectory:(id)fp8;
- (id)bundleUUID;
- (id)bundle;
- (id)sourcePath;
- (id)sourcePaths;
- (id)localPath;
- (id)bundlePath;
- (id)scopeSelector;
- (id)keyEquivalent;
- (id)tabTrigger;
- (id)mouseGesture;
- (id)draggedFileExtensions;
- (void)setScopeSelector:(id)fp8;
-     // Error parsing type: 8@0:4, name: scopeSelectorCString
- (void)setKeyEquivalent:(id)fp8;
- (void)setTabTrigger:(id)fp8;
- (void)setMouseGesture:(id)fp8;
- (void)setDraggedFileExtensions:(id)fp8;
- (void)setContentValue:(id)fp8 forKey:(id)fp12;
- (void)setBundle:(id)fp8;
- (id)content;
- (void)saveChanges;
- (id)supportPath;
- (id)titleWithSelection:(BOOL)fp8 showTabTrigger:(BOOL)fp12;
- (id)titleWithSelection:(BOOL)fp8;
- (void)setKeyEquivalentForMenuItemIndex:(unsigned short)fp8 inMenu:(struct OpaqueMenuRef *)fp12;
- (id)templateFiles;
- (id)newTemplateFile;
- (void)removeTemplateFile:(id)fp8;

@end

@interface Bundle : BaseItem
{
    NSMutableDictionary *mainMenu;
    NSMutableArray *bundlePaths;
    NSString *pristineCopyPlistPath;
    NSMutableDictionary *content;
}

+ (id)bundleWithName:(id)fp8;
+ (id)bundleWithPaths:(id)fp8;
- (id)initWithName:(id)fp8;
- (id)initWithPaths:(id)fp8;
- (void)dealloc;
- (void)prepareForSaving;
- (void)saveChanges;
- (id)supportPath;
- (id)writeToDirectory:(id)fp8;
- (id)localPath;
- (void)filterArray:(id)fp8 allowingItems:(id)fp12 groups:(id)fp16;
- (id)menuStructure;
- (void)setMenuStructure:(id)fp8;
- (void)populateArray:(id)fp8 withItems:(id)fp12;
- (void)addItem:(id)fp8 toArray:(id)fp12;
- (id)flatMenu;
- (id)bundleItemInstallPath;
- (id)bundleItemsOnDisk;
- (id)bundlePaths;
- (id)ordering;
- (id)disabled;
- (id)deleted;
- (void)removeBundleItem:(id)fp8;
- (void)registerBundleItem:(id)fp8;
- (void)enableUUID:(id)fp8;
- (void)undeleteUUID:(id)fp8;
- (id)bundleItems;
- (void)place:(id)fp8 after:(id)fp12;
- (id)bundleItemsOfKind:(id)fp8;

@end

@interface BaseItem : NSObject
{
    NSString *name;
    NSString *kind;
    NSString *UUID;
    BOOL isModified;
}

- (id)initWithName:(id)fp8 kind:(id)fp12 UUID:(id)fp16;
- (id)init;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)dealloc;
- (id)description;
- (BOOL)isEqual:(id)fp8;
- (int)compare:(id)fp8;
- (int)caseInsensitiveCompare:(id)fp8;
- (id)name;
- (id)kind;
- (id)UUID;
- (BOOL)isModified;
- (void)setName:(id)fp8;
- (void)setModified:(BOOL)fp8;
- (id)writeToDirectory:(id)fp8;
- (void)saveChanges;

@end

@interface BundleItemStub : NSObject
{
    NSString *path;
    NSDictionary *contents;
}

+ (id)bundleItemStubWithPath:(id)fp8;
- (id)initWithPath:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)encodeWithCoder:(id)fp8;
- (id)UUID;
- (id)path;
- (id)contents;
- (id)description;

@end

@interface BundleStub : NSObject
{
    NSString *UUID;
    NSString *path;
}

+ (id)bundleStubWithPath:(id)fp8;
- (id)initWithPath:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)encodeWithCoder:(id)fp8;
- (id)UUID;
- (id)path;
- (id)description;

@end

@interface OakBundleMenuManager : NSObject
{
    OakBundleMenuHelper *bundleMenuHelper;
    OakTemplateMenuHelper *templateMenuHelper;
}

+ (id)sharedInstance;
- (id)init;
- (unsigned int)addBundleItems:(id)fp8 toMenu:(id)fp12 withDelegate:(id)fp16 andReturnIndexOf:(id)fp20;
- (unsigned int)populateMenuWithBundles:(id)fp8 andReturnIndexOf:(id)fp12;
- (void)editCommands:(id)fp8;
- (void)editMacros:(id)fp8;
- (void)editSnippets:(id)fp8;
- (void)editLanguages:(id)fp8;
- (void)editTemplates:(id)fp8;
- (void)reloadBundlesIgnoringCache:(id)fp8;
- (void)reloadBundles:(id)fp8;
- (void)orderFrontBundleEditor:(id)fp8;
- (void)selectBundleItemFromList:(id)fp8;
- (void)menuNeedsUpdate:(id)fp8;
- (BOOL)menuHasKeyEquivalent:(id)fp8 forEvent:(id)fp12 target:(id *)fp16 action:(SEL *)fp20;

@end

@interface OakTemplateMenuHelper : OakMenuHelperBase
{
}

- (void)menuNeedsUpdate:(id)fp8;

@end

@interface OakBundleMenuHelper : OakMenuHelperBase
{
    short fontID;
    unsigned short fontSize;
    BOOL hasSelection;
}

- (void)addItem:(id)fp8 toMenu:(id)fp12 usingGroups:(id)fp16;
- (void)populateMenu:(id)fp8 withItems:(id)fp12 usingGroups:(id)fp16;
- (void)menuNeedsUpdate:(id)fp8;

@end

@interface OakMenuHelperBase : NSObject
{
    NSMutableArray *menus;
    NSMutableArray *tabTriggers;
}

- (id)init;
- (void)cleanMenu:(id)fp8;
- (void)dummy:(id)fp8;
- (void)menuDidClose:(id)fp8;
- (id)addBundleItem:(id)fp8 withSelection:(BOOL)fp12 toMenu:(id)fp16;
- (void)performMenuChoice:(id)fp8;
- (BOOL)menuHasKeyEquivalent:(id)fp8 forEvent:(id)fp12 target:(id *)fp16 action:(SEL *)fp20;

@end

@interface BackgroundReader : NSObject
{
    int fd;
    BOOL doneReading;
    BOOL isShowingBusyCursor;
    NSString *result;
    NSWindow *window;
}

- (BOOL)isAbortEvent:(id)fp8;
- (void)terminateProcess:(int)fp8;
- (id)initWithFileDescriptor:(int)fp8 processID:(int)fp12 forWindow:(id)fp16;
- (void)dealloc;
- (void)bringUpProgressBar:(id)fp8;
- (id)result;
- (void)readInBackground:(id)fp8;
- (void)didReadString:(id)fp8;

@end

@interface NSObject (RunCommand)
- (id)allEnvironmentVariables;
- (id)executeShellCommand:(id)fp8;
- (id)executeShellCommand:(id)fp8 variables:(id)fp12;
- (id)executeShellCommand:(id)fp8 input:(id)fp12;
- (id)executeShellCommand:(id)fp8 input:(id)fp12 variables:(id)fp16;
- (id)executeShellCommand:(id)fp8 input:(id)fp12 variables:(id)fp16 returnCode:(int *)fp20;
- (void)writeInBackground:(id)fp8;
- (id)runCommand:(id)fp8 input:(id)fp12 variables:(id)fp16 returnCode:(int *)fp20 async:(BOOL)fp24;
- (id)executeShellCommand:(id)fp8 input:(id)fp12 variables:(id)fp16 returnCode:(int *)fp20 async:(BOOL)fp24;
@end

@interface CacheManager : NSObject
{
    NSMutableDictionary *pathContents;
    NSMutableDictionary *pathLastChanged;
    NSMutableSet *didAccess;
    BOOL isModified;
}

+ (id)sharedInstance;
+ (id)lastDirectoryUpdateForPath:(id)fp8;
- (id)init;
- (void)applicationWillTerminate:(id)fp8;
- (void)dealloc;
- (id)contentsForPath:(id)fp8;
- (void)setContents:(id)fp8 forPath:(id)fp12;
- (void)invalidateCacheForPath:(id)fp8;
- (id)cacheFile;
- (id)cacheFormatVersion;
- (void)loadCache;
- (void)saveCache;
- (void)flush;

@end

@interface OakMenuItemCell : NSTextFieldCell
{
    NSString *keyEquivalent;
    NSString *tabTrigger;
}

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)keyEquivalent;
- (id)tabTrigger;
- (void)setKeyEquivalent:(id)fp8;
- (void)setTabTrigger:(id)fp8;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)selectWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 start:(int)fp36 length:(int)fp40;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (struct _NSSize)cellSize;

@end

